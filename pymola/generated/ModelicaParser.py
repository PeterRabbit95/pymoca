# Generated from .\Modelica.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3^")
        buf.write("\u0401\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\3\2\3\2\5\2\u0095\n\2")
        buf.write("\3\2\5\2\u0098\n\2\3\2\7\2\u009b\n\2\f\2\16\2\u009e\13")
        buf.write("\2\3\3\5\3\u00a1\n\3\3\3\3\3\3\3\3\4\5\4\u00a7\n\4\3\4")
        buf.write("\3\4\3\4\3\5\5\5\u00ad\n\5\3\5\3\5\3\6\3\6\3\6\5\6\u00b4")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u00b9\n\6\3\6\3\6\3\6\3\6\5\6\u00bf")
        buf.write("\n\6\3\6\5\6\u00c2\n\6\3\6\3\6\5\6\u00c6\n\6\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00d3\n\7\3\7\5")
        buf.write("\7\u00d6\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00df\n\7")
        buf.write("\3\7\5\7\u00e2\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\7\7\u00ef\n\7\f\7\16\7\u00f2\13\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u00fa\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0101")
        buf.write("\n\7\3\b\3\b\3\t\3\t\3\t\7\t\u0108\n\t\f\t\16\t\u010b")
        buf.write("\13\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7")
        buf.write("\13\u0117\n\13\f\13\16\13\u011a\13\13\3\13\3\13\5\13\u011e")
        buf.write("\n\13\3\13\5\13\u0121\n\13\3\13\5\13\u0124\n\13\3\13\5")
        buf.write("\13\u0127\n\13\3\13\3\13\3\13\5\13\u012c\n\13\3\f\3\f")
        buf.write("\3\r\3\r\3\r\5\r\u0133\n\r\3\r\3\r\3\r\5\r\u0138\n\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\7\16\u013f\n\16\f\16\16\16\u0142")
        buf.write("\13\16\3\17\3\17\3\17\3\17\5\17\u0148\n\17\3\20\5\20\u014b")
        buf.write("\n\20\3\20\5\20\u014e\n\20\3\20\5\20\u0151\n\20\3\20\5")
        buf.write("\20\u0154\n\20\3\20\3\20\5\20\u0158\n\20\3\21\5\21\u015b")
        buf.write("\n\21\3\21\5\21\u015e\n\21\3\21\5\21\u0161\n\21\3\21\5")
        buf.write("\21\u0164\n\21\3\21\3\21\3\21\5\21\u0169\n\21\3\21\3\21")
        buf.write("\3\21\5\21\u016e\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\5\22\u017b\n\22\5\22\u017d\n\22")
        buf.write("\5\22\u017f\n\22\3\22\3\22\3\23\3\23\3\23\7\23\u0186\n")
        buf.write("\23\f\23\16\23\u0189\13\23\3\24\3\24\3\24\5\24\u018e\n")
        buf.write("\24\3\24\5\24\u0191\n\24\3\25\3\25\3\25\5\25\u0196\n\25")
        buf.write("\3\26\3\26\3\26\5\26\u019b\n\26\3\26\3\26\3\27\5\27\u01a0")
        buf.write("\n\27\3\27\5\27\u01a3\n\27\3\27\5\27\u01a6\n\27\3\30\3")
        buf.write("\30\3\31\3\31\3\31\7\31\u01ad\n\31\f\31\16\31\u01b0\13")
        buf.write("\31\3\32\3\32\5\32\u01b4\n\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\34\3\34\5\34\u01bd\n\34\3\34\5\34\u01c0\n\34\3\35\3")
        buf.write("\35\3\35\5\35\u01c5\n\35\3\35\3\35\3\35\3\35\5\35\u01cb")
        buf.write("\n\35\3\36\3\36\5\36\u01cf\n\36\3\36\3\36\3\37\3\37\3")
        buf.write("\37\7\37\u01d6\n\37\f\37\16\37\u01d9\13\37\3 \3 \5 \u01dd")
        buf.write("\n \3!\5!\u01e0\n!\3!\5!\u01e3\n!\3!\3!\5!\u01e7\n!\3")
        buf.write("\"\3\"\5\"\u01eb\n\"\3\"\3\"\3#\3#\5#\u01f1\n#\3#\5#\u01f4")
        buf.write("\n#\3#\3#\5#\u01f8\n#\3#\5#\u01fb\n#\3$\3$\3$\5$\u0200")
        buf.write("\n$\3$\5$\u0203\n$\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u0212\n\'\3\'\5\'\u0215\n\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\5\'\u021c\n\'\3\'\5\'\u021f\n\'\3\'\3\'\5\'\u0223")
        buf.write("\n\'\3(\5(\u0226\n(\3(\3(\3(\3(\7(\u022c\n(\f(\16(\u022f")
        buf.write("\13(\3)\5)\u0232\n)\3)\3)\3)\3)\7)\u0238\n)\f)\16)\u023b")
        buf.write("\13)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0248\n*\3+\3")
        buf.write("+\3+\3,\3,\3,\3,\5,\u0251\n,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\5,\u0260\n,\3-\3-\3-\3.\3.\3.\3.\3.\3.\7")
        buf.write(".\u026b\n.\f.\16.\u026e\13.\3.\3.\3.\3.\3.\3.\7.\u0276")
        buf.write("\n.\f.\16.\u0279\13.\7.\u027b\n.\f.\16.\u027e\13.\3.\3")
        buf.write(".\3.\3.\7.\u0284\n.\f.\16.\u0287\13.\5.\u0289\n.\3.\3")
        buf.write(".\3.\3/\3/\3/\3/\3/\3/\7/\u0294\n/\f/\16/\u0297\13/\3")
        buf.write("/\3/\3/\3/\3/\3/\7/\u029f\n/\f/\16/\u02a2\13/\7/\u02a4")
        buf.write("\n/\f/\16/\u02a7\13/\3/\3/\3/\3/\7/\u02ad\n/\f/\16/\u02b0")
        buf.write("\13/\5/\u02b2\n/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\7\60\u02bd\n\60\f\60\16\60\u02c0\13\60\3\60\3\60\3\60")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u02cb\n\61\f\61\16")
        buf.write("\61\u02ce\13\61\3\61\3\61\3\61\3\62\3\62\3\62\7\62\u02d6")
        buf.write("\n\62\f\62\16\62\u02d9\13\62\3\63\3\63\3\63\5\63\u02de")
        buf.write("\n\63\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u02e6\n\64\f")
        buf.write("\64\16\64\u02e9\13\64\3\64\3\64\3\64\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\7\65\u02f4\n\65\f\65\16\65\u02f7\13\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\7\65\u02ff\n\65\f\65\16\65")
        buf.write("\u0302\13\65\7\65\u0304\n\65\f\65\16\65\u0307\13\65\3")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0312")
        buf.write("\n\66\f\66\16\66\u0315\13\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\7\66\u031d\n\66\f\66\16\66\u0320\13\66\7\66\u0322")
        buf.write("\n\66\f\66\16\66\u0325\13\66\3\66\3\66\3\66\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\78\u033b\n8\f8\168\u033e\138\38\38\38\58\u0343\n8\3")
        buf.write("9\39\39\39\39\59\u034a\n9\59\u034c\n9\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\5:\u0358\n:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\7:\u0369\n:\f:\16:\u036c\13:\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\7")
        buf.write(";\u0382\n;\f;\16;\u0385\13;\3;\3;\3;\3;\3;\3;\3;\5;\u038e")
        buf.write("\n;\3<\5<\u0391\n<\3<\3<\3<\7<\u0396\n<\f<\16<\u0399\13")
        buf.write("<\3=\5=\u039c\n=\3=\3=\5=\u03a0\n=\3=\5=\u03a3\n=\3>\3")
        buf.write(">\5>\u03a7\n>\3>\3>\3?\3?\3?\3?\3?\7?\u03b0\n?\f?\16?")
        buf.write("\u03b3\13?\3?\5?\u03b6\n?\3@\3@\3@\7@\u03bb\n@\f@\16@")
        buf.write("\u03be\13@\3A\3A\3A\3A\3B\3B\3B\3B\5B\u03c8\nB\3B\3B\3")
        buf.write("B\5B\u03cd\nB\3C\5C\u03d0\nC\3C\3C\7C\u03d4\nC\fC\16C")
        buf.write("\u03d7\13C\3D\3D\3D\7D\u03dc\nD\fD\16D\u03df\13D\3E\3")
        buf.write("E\3E\3E\7E\u03e5\nE\fE\16E\u03e8\13E\3E\3E\3F\3F\5F\u03ee")
        buf.write("\nF\3G\3G\5G\u03f2\nG\3H\3H\3H\7H\u03f7\nH\fH\16H\u03fa")
        buf.write("\13H\5H\u03fc\nH\3I\3I\3I\3I\2\3rJ\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\2\n\3\2\r\16\3\2#$\3\2%\'\3\2")
        buf.write("()\3\2;<\4\2\37\37=?\4\2::@B\3\2CH\2\u0465\2\u0097\3\2")
        buf.write("\2\2\4\u00a0\3\2\2\2\6\u00a6\3\2\2\2\b\u00ac\3\2\2\2\n")
        buf.write("\u00c5\3\2\2\2\f\u0100\3\2\2\2\16\u0102\3\2\2\2\20\u0104")
        buf.write("\3\2\2\2\22\u010c\3\2\2\2\24\u010f\3\2\2\2\26\u012d\3")
        buf.write("\2\2\2\30\u0132\3\2\2\2\32\u0140\3\2\2\2\34\u0147\3\2")
        buf.write("\2\2\36\u014a\3\2\2\2 \u015a\3\2\2\2\"\u016f\3\2\2\2$")
        buf.write("\u0182\3\2\2\2&\u018a\3\2\2\2(\u0192\3\2\2\2*\u0197\3")
        buf.write("\2\2\2,\u019f\3\2\2\2.\u01a7\3\2\2\2\60\u01a9\3\2\2\2")
        buf.write("\62\u01b1\3\2\2\2\64\u01b7\3\2\2\2\66\u01ba\3\2\2\28\u01ca")
        buf.write("\3\2\2\2:\u01cc\3\2\2\2<\u01d2\3\2\2\2>\u01dc\3\2\2\2")
        buf.write("@\u01df\3\2\2\2B\u01e8\3\2\2\2D\u01ee\3\2\2\2F\u01fc\3")
        buf.write("\2\2\2H\u0204\3\2\2\2J\u0208\3\2\2\2L\u020b\3\2\2\2N\u0225")
        buf.write("\3\2\2\2P\u0231\3\2\2\2R\u0247\3\2\2\2T\u0249\3\2\2\2")
        buf.write("V\u025f\3\2\2\2X\u0261\3\2\2\2Z\u0264\3\2\2\2\\\u028d")
        buf.write("\3\2\2\2^\u02b6\3\2\2\2`\u02c4\3\2\2\2b\u02d2\3\2\2\2")
        buf.write("d\u02da\3\2\2\2f\u02df\3\2\2\2h\u02ed\3\2\2\2j\u030b\3")
        buf.write("\2\2\2l\u0329\3\2\2\2n\u0342\3\2\2\2p\u0344\3\2\2\2r\u0357")
        buf.write("\3\2\2\2t\u038d\3\2\2\2v\u0390\3\2\2\2x\u039b\3\2\2\2")
        buf.write("z\u03a4\3\2\2\2|\u03b5\3\2\2\2~\u03b7\3\2\2\2\u0080\u03bf")
        buf.write("\3\2\2\2\u0082\u03cc\3\2\2\2\u0084\u03cf\3\2\2\2\u0086")
        buf.write("\u03d8\3\2\2\2\u0088\u03e0\3\2\2\2\u008a\u03ed\3\2\2\2")
        buf.write("\u008c\u03ef\3\2\2\2\u008e\u03fb\3\2\2\2\u0090\u03fd\3")
        buf.write("\2\2\2\u0092\u0094\7T\2\2\u0093\u0095\5x=\2\u0094\u0093")
        buf.write("\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0096\3\2\2\2\u0096")
        buf.write("\u0098\7\3\2\2\u0097\u0092\3\2\2\2\u0097\u0098\3\2\2\2")
        buf.write("\u0098\u009c\3\2\2\2\u0099\u009b\5\4\3\2\u009a\u0099\3")
        buf.write("\2\2\2\u009b\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d")
        buf.write("\3\2\2\2\u009d\3\3\2\2\2\u009e\u009c\3\2\2\2\u009f\u00a1")
        buf.write("\7S\2\2\u00a0\u009f\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1")
        buf.write("\u00a2\3\2\2\2\u00a2\u00a3\5\6\4\2\u00a3\u00a4\7\3\2\2")
        buf.write("\u00a4\5\3\2\2\2\u00a5\u00a7\7U\2\2\u00a6\u00a5\3\2\2")
        buf.write("\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9")
        buf.write("\5\b\5\2\u00a9\u00aa\5\f\7\2\u00aa\7\3\2\2\2\u00ab\u00ad")
        buf.write("\7R\2\2\u00ac\u00ab\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad")
        buf.write("\u00ae\3\2\2\2\u00ae\u00af\5\n\6\2\u00af\t\3\2\2\2\u00b0")
        buf.write("\u00c6\7\4\2\2\u00b1\u00c6\7\5\2\2\u00b2\u00b4\7\6\2\2")
        buf.write("\u00b3\u00b2\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00b5\3")
        buf.write("\2\2\2\u00b5\u00c6\7\7\2\2\u00b6\u00c6\7\b\2\2\u00b7\u00b9")
        buf.write("\7\t\2\2\u00b8\u00b7\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9")
        buf.write("\u00ba\3\2\2\2\u00ba\u00c6\7\n\2\2\u00bb\u00c6\7\13\2")
        buf.write("\2\u00bc\u00c6\7\f\2\2\u00bd\u00bf\t\2\2\2\u00be\u00bd")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c1\3\2\2\2\u00c0")
        buf.write("\u00c2\7\6\2\2\u00c1\u00c0\3\2\2\2\u00c1\u00c2\3\2\2\2")
        buf.write("\u00c2\u00c3\3\2\2\2\u00c3\u00c6\7\17\2\2\u00c4\u00c6")
        buf.write("\7\6\2\2\u00c5\u00b0\3\2\2\2\u00c5\u00b1\3\2\2\2\u00c5")
        buf.write("\u00b3\3\2\2\2\u00c5\u00b6\3\2\2\2\u00c5\u00b8\3\2\2\2")
        buf.write("\u00c5\u00bb\3\2\2\2\u00c5\u00bc\3\2\2\2\u00c5\u00be\3")
        buf.write("\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\13\3\2\2\2\u00c7\u00c8")
        buf.write("\7Z\2\2\u00c8\u00c9\5\u008eH\2\u00c9\u00ca\5\24\13\2\u00ca")
        buf.write("\u00cb\7\20\2\2\u00cb\u00cc\7Z\2\2\u00cc\u0101\3\2\2\2")
        buf.write("\u00cd\u00ce\7Z\2\2\u00ce\u00cf\7\21\2\2\u00cf\u00d0\5")
        buf.write("\16\b\2\u00d0\u00d2\5v<\2\u00d1\u00d3\5\u0088E\2\u00d2")
        buf.write("\u00d1\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d5\3\2\2\2")
        buf.write("\u00d4\u00d6\5:\36\2\u00d5\u00d4\3\2\2\2\u00d5\u00d6\3")
        buf.write("\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d8\5\u008cG\2\u00d8")
        buf.write("\u0101\3\2\2\2\u00d9\u00da\7Z\2\2\u00da\u00db\7\21\2\2")
        buf.write("\u00db\u00dc\7\22\2\2\u00dc\u00e1\7\23\2\2\u00dd\u00df")
        buf.write("\5\20\t\2\u00de\u00dd\3\2\2\2\u00de\u00df\3\2\2\2\u00df")
        buf.write("\u00e2\3\2\2\2\u00e0\u00e2\7\24\2\2\u00e1\u00de\3\2\2")
        buf.write("\2\u00e1\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4")
        buf.write("\7\25\2\2\u00e4\u0101\5\u008cG\2\u00e5\u00e6\7Z\2\2\u00e6")
        buf.write("\u00e7\7\21\2\2\u00e7\u00e8\7\26\2\2\u00e8\u00e9\7\23")
        buf.write("\2\2\u00e9\u00ea\5v<\2\u00ea\u00eb\7\27\2\2\u00eb\u00f0")
        buf.write("\7Z\2\2\u00ec\u00ed\7\27\2\2\u00ed\u00ef\7Z\2\2\u00ee")
        buf.write("\u00ec\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2")
        buf.write("\u00f0\u00f1\3\2\2\2\u00f1\u00f3\3\2\2\2\u00f2\u00f0\3")
        buf.write("\2\2\2\u00f3\u00f4\7\25\2\2\u00f4\u00f5\5\u008cG\2\u00f5")
        buf.write("\u0101\3\2\2\2\u00f6\u00f7\7\30\2\2\u00f7\u00f9\7Z\2\2")
        buf.write("\u00f8\u00fa\5:\36\2\u00f9\u00f8\3\2\2\2\u00f9\u00fa\3")
        buf.write("\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\5\u008eH\2\u00fc")
        buf.write("\u00fd\5\24\13\2\u00fd\u00fe\7\20\2\2\u00fe\u00ff\7Z\2")
        buf.write("\2\u00ff\u0101\3\2\2\2\u0100\u00c7\3\2\2\2\u0100\u00cd")
        buf.write("\3\2\2\2\u0100\u00d9\3\2\2\2\u0100\u00e5\3\2\2\2\u0100")
        buf.write("\u00f6\3\2\2\2\u0101\r\3\2\2\2\u0102\u0103\5,\27\2\u0103")
        buf.write("\17\3\2\2\2\u0104\u0109\5\22\n\2\u0105\u0106\7\27\2\2")
        buf.write("\u0106\u0108\5\22\n\2\u0107\u0105\3\2\2\2\u0108\u010b")
        buf.write("\3\2\2\2\u0109\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a")
        buf.write("\21\3\2\2\2\u010b\u0109\3\2\2\2\u010c\u010d\7Z\2\2\u010d")
        buf.write("\u010e\5\u008cG\2\u010e\23\3\2\2\2\u010f\u0118\5\32\16")
        buf.write("\2\u0110\u0111\7\31\2\2\u0111\u0117\5\32\16\2\u0112\u0113")
        buf.write("\7\32\2\2\u0113\u0117\5\32\16\2\u0114\u0117\5N(\2\u0115")
        buf.write("\u0117\5P)\2\u0116\u0110\3\2\2\2\u0116\u0112\3\2\2\2\u0116")
        buf.write("\u0114\3\2\2\2\u0116\u0115\3\2\2\2\u0117\u011a\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0126\3")
        buf.write("\2\2\2\u011a\u0118\3\2\2\2\u011b\u011d\7\33\2\2\u011c")
        buf.write("\u011e\5\26\f\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2")
        buf.write("\2\u011e\u0120\3\2\2\2\u011f\u0121\5\30\r\2\u0120\u011f")
        buf.write("\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122")
        buf.write("\u0124\5\u0090I\2\u0123\u0122\3\2\2\2\u0123\u0124\3\2")
        buf.write("\2\2\u0124\u0125\3\2\2\2\u0125\u0127\7\24\2\2\u0126\u011b")
        buf.write("\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u012b\3\2\2\2\u0128")
        buf.write("\u0129\5\u0090I\2\u0129\u012a\7\3\2\2\u012a\u012c\3\2")
        buf.write("\2\2\u012b\u0128\3\2\2\2\u012b\u012c\3\2\2\2\u012c\25")
        buf.write("\3\2\2\2\u012d\u012e\7[\2\2\u012e\27\3\2\2\2\u012f\u0130")
        buf.write("\5x=\2\u0130\u0131\7\21\2\2\u0131\u0133\3\2\2\2\u0132")
        buf.write("\u012f\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0135\7Z\2\2\u0135\u0137\7\23\2\2\u0136\u0138\5")
        buf.write("\u0086D\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\u013a\7\25\2\2\u013a\31\3\2\2\2\u013b")
        buf.write("\u013c\5\34\17\2\u013c\u013d\7\3\2\2\u013d\u013f\3\2\2")
        buf.write("\2\u013e\u013b\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\33\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0143\u0148\5\"\22\2\u0144\u0148\5&\24\2\u0145")
        buf.write("\u0148\5\36\20\2\u0146\u0148\5 \21\2\u0147\u0143\3\2\2")
        buf.write("\2\u0147\u0144\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0146")
        buf.write("\3\2\2\2\u0148\35\3\2\2\2\u0149\u014b\7V\2\2\u014a\u0149")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c")
        buf.write("\u014e\7S\2\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2")
        buf.write("\u014e\u0150\3\2\2\2\u014f\u0151\7W\2\2\u0150\u014f\3")
        buf.write("\2\2\2\u0150\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u0154")
        buf.write("\7X\2\2\u0153\u0152\3\2\2\2\u0153\u0154\3\2\2\2\u0154")
        buf.write("\u0157\3\2\2\2\u0155\u0158\5\6\4\2\u0156\u0158\5*\26\2")
        buf.write("\u0157\u0155\3\2\2\2\u0157\u0156\3\2\2\2\u0158\37\3\2")
        buf.write("\2\2\u0159\u015b\7V\2\2\u015a\u0159\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015e\7S\2\2\u015d")
        buf.write("\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\3\2\2\2")
        buf.write("\u015f\u0161\7W\2\2\u0160\u015f\3\2\2\2\u0160\u0161\3")
        buf.write("\2\2\2\u0161\u0163\3\2\2\2\u0162\u0164\7X\2\2\u0163\u0162")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165\3\2\2\2\u0165")
        buf.write("\u0168\7\34\2\2\u0166\u0169\5\6\4\2\u0167\u0169\5*\26")
        buf.write("\2\u0168\u0166\3\2\2\2\u0168\u0167\3\2\2\2\u0169\u016d")
        buf.write("\3\2\2\2\u016a\u016b\5(\25\2\u016b\u016c\5\u008cG\2\u016c")
        buf.write("\u016e\3\2\2\2\u016d\u016a\3\2\2\2\u016d\u016e\3\2\2\2")
        buf.write("\u016e!\3\2\2\2\u016f\u017e\7\35\2\2\u0170\u0171\7Z\2")
        buf.write("\2\u0171\u0172\7\21\2\2\u0172\u017f\5x=\2\u0173\u017c")
        buf.write("\5x=\2\u0174\u017a\7\36\2\2\u0175\u017b\7\37\2\2\u0176")
        buf.write("\u0177\7 \2\2\u0177\u0178\5$\23\2\u0178\u0179\7!\2\2\u0179")
        buf.write("\u017b\3\2\2\2\u017a\u0175\3\2\2\2\u017a\u0176\3\2\2\2")
        buf.write("\u017b\u017d\3\2\2\2\u017c\u0174\3\2\2\2\u017c\u017d\3")
        buf.write("\2\2\2\u017d\u017f\3\2\2\2\u017e\u0170\3\2\2\2\u017e\u0173")
        buf.write("\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\5\u008cG\2\u0181")
        buf.write("#\3\2\2\2\u0182\u0187\7Z\2\2\u0183\u0184\7\27\2\2\u0184")
        buf.write("\u0186\5$\23\2\u0185\u0183\3\2\2\2\u0186\u0189\3\2\2\2")
        buf.write("\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188%\3\2\2")
        buf.write("\2\u0189\u0187\3\2\2\2\u018a\u018b\7\30\2\2\u018b\u018d")
        buf.write("\5x=\2\u018c\u018e\5:\36\2\u018d\u018c\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u0190\3\2\2\2\u018f\u0191\5\u0090I\2\u0190")
        buf.write("\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\'\3\2\2\2\u0192")
        buf.write("\u0193\7\"\2\2\u0193\u0195\5v<\2\u0194\u0196\5:\36\2\u0195")
        buf.write("\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196)\3\2\2\2\u0197")
        buf.write("\u0198\5,\27\2\u0198\u019a\5.\30\2\u0199\u019b\5\u0088")
        buf.write("E\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u019d\5\60\31\2\u019d+\3\2\2\2\u019e\u01a0")
        buf.write("\t\3\2\2\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0")
        buf.write("\u01a2\3\2\2\2\u01a1\u01a3\t\4\2\2\u01a2\u01a1\3\2\2\2")
        buf.write("\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2\u01a4\u01a6\t")
        buf.write("\5\2\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6-")
        buf.write("\3\2\2\2\u01a7\u01a8\5v<\2\u01a8/\3\2\2\2\u01a9\u01ae")
        buf.write("\5\62\32\2\u01aa\u01ab\7\27\2\2\u01ab\u01ad\5\62\32\2")
        buf.write("\u01ac\u01aa\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3")
        buf.write("\2\2\2\u01ae\u01af\3\2\2\2\u01af\61\3\2\2\2\u01b0\u01ae")
        buf.write("\3\2\2\2\u01b1\u01b3\5\66\34\2\u01b2\u01b4\5\64\33\2\u01b3")
        buf.write("\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2")
        buf.write("\u01b5\u01b6\5\u008cG\2\u01b6\63\3\2\2\2\u01b7\u01b8\7")
        buf.write("*\2\2\u01b8\u01b9\5n8\2\u01b9\65\3\2\2\2\u01ba\u01bc\7")
        buf.write("Z\2\2\u01bb\u01bd\5\u0088E\2\u01bc\u01bb\3\2\2\2\u01bc")
        buf.write("\u01bd\3\2\2\2\u01bd\u01bf\3\2\2\2\u01be\u01c0\58\35\2")
        buf.write("\u01bf\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\67\3\2")
        buf.write("\2\2\u01c1\u01c4\5:\36\2\u01c2\u01c3\7\21\2\2\u01c3\u01c5")
        buf.write("\5n8\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01cb")
        buf.write("\3\2\2\2\u01c6\u01c7\7\21\2\2\u01c7\u01cb\5n8\2\u01c8")
        buf.write("\u01c9\7+\2\2\u01c9\u01cb\5n8\2\u01ca\u01c1\3\2\2\2\u01ca")
        buf.write("\u01c6\3\2\2\2\u01ca\u01c8\3\2\2\2\u01cb9\3\2\2\2\u01cc")
        buf.write("\u01ce\7\23\2\2\u01cd\u01cf\5<\37\2\u01ce\u01cd\3\2\2")
        buf.write("\2\u01ce\u01cf\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1")
        buf.write("\7\25\2\2\u01d1;\3\2\2\2\u01d2\u01d7\5> \2\u01d3\u01d4")
        buf.write("\7\27\2\2\u01d4\u01d6\5> \2\u01d5\u01d3\3\2\2\2\u01d6")
        buf.write("\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8=\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dd\5@!\2")
        buf.write("\u01db\u01dd\5D#\2\u01dc\u01da\3\2\2\2\u01dc\u01db\3\2")
        buf.write("\2\2\u01dd?\3\2\2\2\u01de\u01e0\7Q\2\2\u01df\u01de\3\2")
        buf.write("\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01e3")
        buf.write("\7S\2\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01e6\3\2\2\2\u01e4\u01e7\5B\"\2\u01e5\u01e7\5F$\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e6\u01e5\3\2\2\2\u01e7A\3\2\2\2\u01e8")
        buf.write("\u01ea\5v<\2\u01e9\u01eb\58\35\2\u01ea\u01e9\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\5\u008e")
        buf.write("H\2\u01edC\3\2\2\2\u01ee\u01f0\7V\2\2\u01ef\u01f1\7Q\2")
        buf.write("\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3")
        buf.write("\3\2\2\2\u01f2\u01f4\7S\2\2\u01f3\u01f2\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01fa\3\2\2\2\u01f5\u01f8\5L\'\2")
        buf.write("\u01f6\u01f8\5H%\2\u01f7\u01f5\3\2\2\2\u01f7\u01f6\3\2")
        buf.write("\2\2\u01f8\u01fb\3\2\2\2\u01f9\u01fb\5F$\2\u01fa\u01f7")
        buf.write("\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fbE\3\2\2\2\u01fc\u01ff")
        buf.write("\7\34\2\2\u01fd\u0200\5L\'\2\u01fe\u0200\5H%\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u01fe\3\2\2\2\u0200\u0202\3\2\2\2\u0201")
        buf.write("\u0203\5(\25\2\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203G\3\2\2\2\u0204\u0205\5,\27\2\u0205\u0206\5.\30")
        buf.write("\2\u0206\u0207\5J&\2\u0207I\3\2\2\2\u0208\u0209\5\66\34")
        buf.write("\2\u0209\u020a\5\u008cG\2\u020aK\3\2\2\2\u020b\u020c\5")
        buf.write("\b\5\2\u020c\u020d\7Z\2\2\u020d\u0222\7\21\2\2\u020e\u020f")
        buf.write("\5\16\b\2\u020f\u0211\5v<\2\u0210\u0212\5\u0088E\2\u0211")
        buf.write("\u0210\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0214\3\2\2\2")
        buf.write("\u0213\u0215\5:\36\2\u0214\u0213\3\2\2\2\u0214\u0215\3")
        buf.write("\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217\5\u008cG\2\u0217")
        buf.write("\u0223\3\2\2\2\u0218\u0219\7\22\2\2\u0219\u021e\7\23\2")
        buf.write("\2\u021a\u021c\5\20\t\2\u021b\u021a\3\2\2\2\u021b\u021c")
        buf.write("\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021f\7\24\2\2\u021e")
        buf.write("\u021b\3\2\2\2\u021e\u021d\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220\u0221\7\25\2\2\u0221\u0223\5\u008cG\2\u0222\u020e")
        buf.write("\3\2\2\2\u0222\u0218\3\2\2\2\u0223M\3\2\2\2\u0224\u0226")
        buf.write("\7Y\2\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u022d\7,\2\2\u0228\u0229\5T+\2\u0229")
        buf.write("\u022a\7\3\2\2\u022a\u022c\3\2\2\2\u022b\u0228\3\2\2\2")
        buf.write("\u022c\u022f\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3")
        buf.write("\2\2\2\u022eO\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0232")
        buf.write("\7Y\2\2\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u0233\3\2\2\2\u0233\u0239\7-\2\2\u0234\u0235\5X-\2\u0235")
        buf.write("\u0236\7\3\2\2\u0236\u0238\3\2\2\2\u0237\u0234\3\2\2\2")
        buf.write("\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3")
        buf.write("\2\2\2\u023aQ\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023d")
        buf.write("\5p9\2\u023d\u023e\7\21\2\2\u023e\u023f\5n8\2\u023f\u0248")
        buf.write("\3\2\2\2\u0240\u0248\5Z.\2\u0241\u0248\5^\60\2\u0242\u0248")
        buf.write("\5l\67\2\u0243\u0248\5h\65\2\u0244\u0245\5v<\2\u0245\u0246")
        buf.write("\5z>\2\u0246\u0248\3\2\2\2\u0247\u023c\3\2\2\2\u0247\u0240")
        buf.write("\3\2\2\2\u0247\u0241\3\2\2\2\u0247\u0242\3\2\2\2\u0247")
        buf.write("\u0243\3\2\2\2\u0247\u0244\3\2\2\2\u0248S\3\2\2\2\u0249")
        buf.write("\u024a\5R*\2\u024a\u024b\5\u008cG\2\u024bU\3\2\2\2\u024c")
        buf.write("\u0250\5x=\2\u024d\u024e\7+\2\2\u024e\u0251\5n8\2\u024f")
        buf.write("\u0251\5z>\2\u0250\u024d\3\2\2\2\u0250\u024f\3\2\2\2\u0251")
        buf.write("\u0260\3\2\2\2\u0252\u0253\7\23\2\2\u0253\u0254\5\u0084")
        buf.write("C\2\u0254\u0255\7\25\2\2\u0255\u0256\7+\2\2\u0256\u0257")
        buf.write("\5x=\2\u0257\u0258\5z>\2\u0258\u0260\3\2\2\2\u0259\u0260")
        buf.write("\7.\2\2\u025a\u0260\7/\2\2\u025b\u0260\5\\/\2\u025c\u0260")
        buf.write("\5`\61\2\u025d\u0260\5f\64\2\u025e\u0260\5j\66\2\u025f")
        buf.write("\u024c\3\2\2\2\u025f\u0252\3\2\2\2\u025f\u0259\3\2\2\2")
        buf.write("\u025f\u025a\3\2\2\2\u025f\u025b\3\2\2\2\u025f\u025c\3")
        buf.write("\2\2\2\u025f\u025d\3\2\2\2\u025f\u025e\3\2\2\2\u0260W")
        buf.write("\3\2\2\2\u0261\u0262\5V,\2\u0262\u0263\5\u008cG\2\u0263")
        buf.write("Y\3\2\2\2\u0264\u0265\7*\2\2\u0265\u0266\5n8\2\u0266\u026c")
        buf.write("\7\60\2\2\u0267\u0268\5T+\2\u0268\u0269\7\3\2\2\u0269")
        buf.write("\u026b\3\2\2\2\u026a\u0267\3\2\2\2\u026b\u026e\3\2\2\2")
        buf.write("\u026c\u026a\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u027c\3")
        buf.write("\2\2\2\u026e\u026c\3\2\2\2\u026f\u0270\7\61\2\2\u0270")
        buf.write("\u0271\5n8\2\u0271\u0277\7\60\2\2\u0272\u0273\5T+\2\u0273")
        buf.write("\u0274\7\3\2\2\u0274\u0276\3\2\2\2\u0275\u0272\3\2\2\2")
        buf.write("\u0276\u0279\3\2\2\2\u0277\u0275\3\2\2\2\u0277\u0278\3")
        buf.write("\2\2\2\u0278\u027b\3\2\2\2\u0279\u0277\3\2\2\2\u027a\u026f")
        buf.write("\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3\2\2\2\u027c")
        buf.write("\u027d\3\2\2\2\u027d\u0288\3\2\2\2\u027e\u027c\3\2\2\2")
        buf.write("\u027f\u0285\7\62\2\2\u0280\u0281\5T+\2\u0281\u0282\7")
        buf.write("\3\2\2\u0282\u0284\3\2\2\2\u0283\u0280\3\2\2\2\u0284\u0287")
        buf.write("\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write("\u0289\3\2\2\2\u0287\u0285\3\2\2\2\u0288\u027f\3\2\2\2")
        buf.write("\u0288\u0289\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028b\7")
        buf.write("\20\2\2\u028b\u028c\7*\2\2\u028c[\3\2\2\2\u028d\u028e")
        buf.write("\7*\2\2\u028e\u028f\5n8\2\u028f\u0295\7\60\2\2\u0290\u0291")
        buf.write("\5X-\2\u0291\u0292\7\3\2\2\u0292\u0294\3\2\2\2\u0293\u0290")
        buf.write("\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296\u02a5\3\2\2\2\u0297\u0295\3\2\2\2")
        buf.write("\u0298\u0299\7\61\2\2\u0299\u029a\5n8\2\u029a\u02a0\7")
        buf.write("\60\2\2\u029b\u029c\5X-\2\u029c\u029d\7\3\2\2\u029d\u029f")
        buf.write("\3\2\2\2\u029e\u029b\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0")
        buf.write("\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a4\3\2\2\2")
        buf.write("\u02a2\u02a0\3\2\2\2\u02a3\u0298\3\2\2\2\u02a4\u02a7\3")
        buf.write("\2\2\2\u02a5\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02b1")
        buf.write("\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a8\u02ae\7\62\2\2\u02a9")
        buf.write("\u02aa\5X-\2\u02aa\u02ab\7\3\2\2\u02ab\u02ad\3\2\2\2\u02ac")
        buf.write("\u02a9\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2")
        buf.write("\u02ae\u02af\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae\3")
        buf.write("\2\2\2\u02b1\u02a8\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3\u02b4\7\20\2\2\u02b4\u02b5\7*\2\2\u02b5")
        buf.write("]\3\2\2\2\u02b6\u02b7\7\63\2\2\u02b7\u02b8\5b\62\2\u02b8")
        buf.write("\u02be\7\64\2\2\u02b9\u02ba\5T+\2\u02ba\u02bb\7\3\2\2")
        buf.write("\u02bb\u02bd\3\2\2\2\u02bc\u02b9\3\2\2\2\u02bd\u02c0\3")
        buf.write("\2\2\2\u02be\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1")
        buf.write("\3\2\2\2\u02c0\u02be\3\2\2\2\u02c1\u02c2\7\20\2\2\u02c2")
        buf.write("\u02c3\7\63\2\2\u02c3_\3\2\2\2\u02c4\u02c5\7\63\2\2\u02c5")
        buf.write("\u02c6\5b\62\2\u02c6\u02cc\7\64\2\2\u02c7\u02c8\5X-\2")
        buf.write("\u02c8\u02c9\7\3\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c7\3")
        buf.write("\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd")
        buf.write("\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf")
        buf.write("\u02d0\7\20\2\2\u02d0\u02d1\7\63\2\2\u02d1a\3\2\2\2\u02d2")
        buf.write("\u02d7\5d\63\2\u02d3\u02d4\7\27\2\2\u02d4\u02d6\5d\63")
        buf.write("\2\u02d5\u02d3\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02d5")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8c\3\2\2\2\u02d9\u02d7")
        buf.write("\3\2\2\2\u02da\u02dd\7Z\2\2\u02db\u02dc\7\65\2\2\u02dc")
        buf.write("\u02de\5n8\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de")
        buf.write("e\3\2\2\2\u02df\u02e0\7\66\2\2\u02e0\u02e1\5n8\2\u02e1")
        buf.write("\u02e7\7\64\2\2\u02e2\u02e3\5X-\2\u02e3\u02e4\7\3\2\2")
        buf.write("\u02e4\u02e6\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e6\u02e9\3")
        buf.write("\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02ea")
        buf.write("\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea\u02eb\7\20\2\2\u02eb")
        buf.write("\u02ec\7\66\2\2\u02ecg\3\2\2\2\u02ed\u02ee\7\67\2\2\u02ee")
        buf.write("\u02ef\5n8\2\u02ef\u02f5\7\60\2\2\u02f0\u02f1\5T+\2\u02f1")
        buf.write("\u02f2\7\3\2\2\u02f2\u02f4\3\2\2\2\u02f3\u02f0\3\2\2\2")
        buf.write("\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3")
        buf.write("\2\2\2\u02f6\u0305\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8\u02f9")
        buf.write("\78\2\2\u02f9\u02fa\5n8\2\u02fa\u0300\7\60\2\2\u02fb\u02fc")
        buf.write("\5T+\2\u02fc\u02fd\7\3\2\2\u02fd\u02ff\3\2\2\2\u02fe\u02fb")
        buf.write("\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3\2\2\2")
        buf.write("\u0303\u02f8\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303\3")
        buf.write("\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0308\u0309\7\20\2\2\u0309\u030a\7\67\2\2\u030a")
        buf.write("i\3\2\2\2\u030b\u030c\7\67\2\2\u030c\u030d\5n8\2\u030d")
        buf.write("\u0313\7\60\2\2\u030e\u030f\5X-\2\u030f\u0310\7\3\2\2")
        buf.write("\u0310\u0312\3\2\2\2\u0311\u030e\3\2\2\2\u0312\u0315\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0323")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0317\78\2\2\u0317")
        buf.write("\u0318\5n8\2\u0318\u031e\7\60\2\2\u0319\u031a\5X-\2\u031a")
        buf.write("\u031b\7\3\2\2\u031b\u031d\3\2\2\2\u031c\u0319\3\2\2\2")
        buf.write("\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3")
        buf.write("\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0316")
        buf.write("\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0323\3\2\2\2")
        buf.write("\u0326\u0327\7\20\2\2\u0327\u0328\7\67\2\2\u0328k\3\2")
        buf.write("\2\2\u0329\u032a\79\2\2\u032a\u032b\7\23\2\2\u032b\u032c")
        buf.write("\5x=\2\u032c\u032d\7\27\2\2\u032d\u032e\5x=\2\u032e\u032f")
        buf.write("\7\25\2\2\u032fm\3\2\2\2\u0330\u0343\5p9\2\u0331\u0332")
        buf.write("\7*\2\2\u0332\u0333\5n8\2\u0333\u0334\7\60\2\2\u0334\u033c")
        buf.write("\5n8\2\u0335\u0336\7\61\2\2\u0336\u0337\5n8\2\u0337\u0338")
        buf.write("\7\60\2\2\u0338\u0339\5n8\2\u0339\u033b\3\2\2\2\u033a")
        buf.write("\u0335\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2")
        buf.write("\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2\2\u033e\u033c\3")
        buf.write("\2\2\2\u033f\u0340\7\62\2\2\u0340\u0341\5n8\2\u0341\u0343")
        buf.write("\3\2\2\2\u0342\u0330\3\2\2\2\u0342\u0331\3\2\2\2\u0343")
        buf.write("o\3\2\2\2\u0344\u034b\5r:\2\u0345\u0346\7\24\2\2\u0346")
        buf.write("\u0349\5r:\2\u0347\u0348\7\24\2\2\u0348\u034a\5r:\2\u0349")
        buf.write("\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034c\3\2\2\2")
        buf.write("\u034b\u0345\3\2\2\2\u034b\u034c\3\2\2\2\u034cq\3\2\2")
        buf.write("\2\u034d\u034e\b:\1\2\u034e\u034f\7:\2\2\u034f\u0358\5")
        buf.write("r:\13\u0350\u0351\5t;\2\u0351\u0352\t\6\2\2\u0352\u0353")
        buf.write("\5t;\2\u0353\u0358\3\2\2\2\u0354\u0355\7I\2\2\u0355\u0358")
        buf.write("\5r:\6\u0356\u0358\5t;\2\u0357\u034d\3\2\2\2\u0357\u0350")
        buf.write("\3\2\2\2\u0357\u0354\3\2\2\2\u0357\u0356\3\2\2\2\u0358")
        buf.write("\u036a\3\2\2\2\u0359\u035a\f\t\2\2\u035a\u035b\t\7\2\2")
        buf.write("\u035b\u0369\5r:\n\u035c\u035d\f\b\2\2\u035d\u035e\t\b")
        buf.write("\2\2\u035e\u0369\5r:\t\u035f\u0360\f\7\2\2\u0360\u0361")
        buf.write("\t\t\2\2\u0361\u0369\5r:\b\u0362\u0363\f\5\2\2\u0363\u0364")
        buf.write("\7J\2\2\u0364\u0369\5r:\6\u0365\u0366\f\4\2\2\u0366\u0367")
        buf.write("\7K\2\2\u0367\u0369\5r:\5\u0368\u0359\3\2\2\2\u0368\u035c")
        buf.write("\3\2\2\2\u0368\u035f\3\2\2\2\u0368\u0362\3\2\2\2\u0368")
        buf.write("\u0365\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2")
        buf.write("\u036a\u036b\3\2\2\2\u036bs\3\2\2\2\u036c\u036a\3\2\2")
        buf.write("\2\u036d\u038e\7\\\2\2\u036e\u038e\7[\2\2\u036f\u038e")
        buf.write("\7L\2\2\u0370\u038e\7M\2\2\u0371\u0372\5x=\2\u0372\u0373")
        buf.write("\5z>\2\u0373\u038e\3\2\2\2\u0374\u0375\7\26\2\2\u0375")
        buf.write("\u038e\5z>\2\u0376\u0377\7Y\2\2\u0377\u038e\5z>\2\u0378")
        buf.write("\u038e\5x=\2\u0379\u037a\7\23\2\2\u037a\u037b\5\u0084")
        buf.write("C\2\u037b\u037c\7\25\2\2\u037c\u038e\3\2\2\2\u037d\u037e")
        buf.write("\7N\2\2\u037e\u0383\5\u0086D\2\u037f\u0380\7\3\2\2\u0380")
        buf.write("\u0382\5\u0086D\2\u0381\u037f\3\2\2\2\u0382\u0385\3\2")
        buf.write("\2\2\u0383\u0381\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386")
        buf.write("\3\2\2\2\u0385\u0383\3\2\2\2\u0386\u0387\7O\2\2\u0387")
        buf.write("\u038e\3\2\2\2\u0388\u0389\7 \2\2\u0389\u038a\5|?\2\u038a")
        buf.write("\u038b\7!\2\2\u038b\u038e\3\2\2\2\u038c\u038e\7\20\2\2")
        buf.write("\u038d\u036d\3\2\2\2\u038d\u036e\3\2\2\2\u038d\u036f\3")
        buf.write("\2\2\2\u038d\u0370\3\2\2\2\u038d\u0371\3\2\2\2\u038d\u0374")
        buf.write("\3\2\2\2\u038d\u0376\3\2\2\2\u038d\u0378\3\2\2\2\u038d")
        buf.write("\u0379\3\2\2\2\u038d\u037d\3\2\2\2\u038d\u0388\3\2\2\2")
        buf.write("\u038d\u038c\3\2\2\2\u038eu\3\2\2\2\u038f\u0391\7\36\2")
        buf.write("\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\u0397\7Z\2\2\u0393\u0394\7\36\2\2\u0394")
        buf.write("\u0396\7Z\2\2\u0395\u0393\3\2\2\2\u0396\u0399\3\2\2\2")
        buf.write("\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398w\3\2\2")
        buf.write("\2\u0399\u0397\3\2\2\2\u039a\u039c\7\36\2\2\u039b\u039a")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039f\7Z\2\2\u039e\u03a0\5\u0088E\2\u039f\u039e\3\2\2")
        buf.write("\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u03a3")
        buf.write("\5x=\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3y")
        buf.write("\3\2\2\2\u03a4\u03a6\7\23\2\2\u03a5\u03a7\5|?\2\u03a6")
        buf.write("\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2")
        buf.write("\u03a8\u03a9\7\25\2\2\u03a9{\3\2\2\2\u03aa\u03b1\5\u0082")
        buf.write("B\2\u03ab\u03ac\7\27\2\2\u03ac\u03b0\5\u0082B\2\u03ad")
        buf.write("\u03ae\7\63\2\2\u03ae\u03b0\5b\62\2\u03af\u03ab\3\2\2")
        buf.write("\2\u03af\u03ad\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b6\3\2\2\2\u03b3")
        buf.write("\u03b1\3\2\2\2\u03b4\u03b6\5~@\2\u03b5\u03aa\3\2\2\2\u03b5")
        buf.write("\u03b4\3\2\2\2\u03b6}\3\2\2\2\u03b7\u03bc\5\u0080A\2\u03b8")
        buf.write("\u03b9\7\27\2\2\u03b9\u03bb\5\u0080A\2\u03ba\u03b8\3\2")
        buf.write("\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\177\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf\u03c0")
        buf.write("\7Z\2\2\u03c0\u03c1\7\21\2\2\u03c1\u03c2\5\u0082B\2\u03c2")
        buf.write("\u0081\3\2\2\2\u03c3\u03c4\7\17\2\2\u03c4\u03c5\5v<\2")
        buf.write("\u03c5\u03c7\7\23\2\2\u03c6\u03c8\5~@\2\u03c7\u03c6\3")
        buf.write("\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca")
        buf.write("\7\25\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03cd\5n8\2\u03cc")
        buf.write("\u03c3\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u0083\3\2\2\2")
        buf.write("\u03ce\u03d0\5n8\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2")
        buf.write("\2\2\u03d0\u03d5\3\2\2\2\u03d1\u03d2\7\27\2\2\u03d2\u03d4")
        buf.write("\5n8\2\u03d3\u03d1\3\2\2\2\u03d4\u03d7\3\2\2\2\u03d5\u03d3")
        buf.write("\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u0085\3\2\2\2\u03d7")
        buf.write("\u03d5\3\2\2\2\u03d8\u03dd\5n8\2\u03d9\u03da\7\27\2\2")
        buf.write("\u03da\u03dc\5n8\2\u03db\u03d9\3\2\2\2\u03dc\u03df\3\2")
        buf.write("\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u0087")
        buf.write("\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u03e1\7N\2\2\u03e1")
        buf.write("\u03e6\5\u008aF\2\u03e2\u03e3\7\27\2\2\u03e3\u03e5\5\u008a")
        buf.write("F\2\u03e4\u03e2\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4")
        buf.write("\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8")
        buf.write("\u03e6\3\2\2\2\u03e9\u03ea\7O\2\2\u03ea\u0089\3\2\2\2")
        buf.write("\u03eb\u03ee\7\24\2\2\u03ec\u03ee\5n8\2\u03ed\u03eb\3")
        buf.write("\2\2\2\u03ed\u03ec\3\2\2\2\u03ee\u008b\3\2\2\2\u03ef\u03f1")
        buf.write("\5\u008eH\2\u03f0\u03f2\5\u0090I\2\u03f1\u03f0\3\2\2\2")
        buf.write("\u03f1\u03f2\3\2\2\2\u03f2\u008d\3\2\2\2\u03f3\u03f8\7")
        buf.write("[\2\2\u03f4\u03f5\7@\2\2\u03f5\u03f7\7[\2\2\u03f6\u03f4")
        buf.write("\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8")
        buf.write("\u03f9\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8\3\2\2\2")
        buf.write("\u03fb\u03f3\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u008f\3")
        buf.write("\2\2\2\u03fd\u03fe\7P\2\2\u03fe\u03ff\5:\36\2\u03ff\u0091")
        buf.write("\3\2\2\2\u0087\u0094\u0097\u009c\u00a0\u00a6\u00ac\u00b3")
        buf.write("\u00b8\u00be\u00c1\u00c5\u00d2\u00d5\u00de\u00e1\u00f0")
        buf.write("\u00f9\u0100\u0109\u0116\u0118\u011d\u0120\u0123\u0126")
        buf.write("\u012b\u0132\u0137\u0140\u0147\u014a\u014d\u0150\u0153")
        buf.write("\u0157\u015a\u015d\u0160\u0163\u0168\u016d\u017a\u017c")
        buf.write("\u017e\u0187\u018d\u0190\u0195\u019a\u019f\u01a2\u01a5")
        buf.write("\u01ae\u01b3\u01bc\u01bf\u01c4\u01ca\u01ce\u01d7\u01dc")
        buf.write("\u01df\u01e2\u01e6\u01ea\u01f0\u01f3\u01f7\u01fa\u01ff")
        buf.write("\u0202\u0211\u0214\u021b\u021e\u0222\u0225\u022d\u0231")
        buf.write("\u0239\u0247\u0250\u025f\u026c\u0277\u027c\u0285\u0288")
        buf.write("\u0295\u02a0\u02a5\u02ae\u02b1\u02be\u02cc\u02d7\u02dd")
        buf.write("\u02e7\u02f5\u0300\u0305\u0313\u031e\u0323\u033c\u0342")
        buf.write("\u0349\u034b\u0357\u0368\u036a\u0383\u038d\u0390\u0397")
        buf.write("\u039b\u039f\u03a2\u03a6\u03af\u03b1\u03b5\u03bc\u03c7")
        buf.write("\u03cc\u03cf\u03d5\u03dd\u03e6\u03ed\u03f1\u03f8\u03fb")
        return buf.getvalue()


class ModelicaParser ( Parser ):

    grammarFileName = "Modelica.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'class'", "'model'", "'operator'", 
                     "'record'", "'block'", "'expandable'", "'connector'", 
                     "'type'", "'package'", "'pure'", "'impure'", "'function'", 
                     "'end'", "'='", "'enumeration'", "'('", "':'", "')'", 
                     "'der'", "','", "'extends'", "'public'", "'protected'", 
                     "'external'", "'replaceable'", "'import'", "'.'", "'*'", 
                     "'{'", "'}'", "'constrainedby'", "'flow'", "'stream'", 
                     "'discrete'", "'parameter'", "'constant'", "'input'", 
                     "'output'", "'if'", "':='", "'equation'", "'algorithm'", 
                     "'break'", "'return'", "'then'", "'elseif'", "'else'", 
                     "'for'", "'loop'", "'in'", "'while'", "'when'", "'elsewhen'", 
                     "'connect'", "'-'", "'^'", "'.^'", "'/'", "'.*'", "'./'", 
                     "'+'", "'.+'", "'.-'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'<>'", "'not'", "'and'", "'or'", "'false'", 
                     "'true'", "'['", "']'", "'annotation'", "'each'", "'partial'", 
                     "'final'", "'within'", "'encapsulated'", "'redeclare'", 
                     "'inner'", "'outer'", "'initial'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "EACH", "PARTIAL", 
                      "FINAL", "WITHIN", "ENCAPSULATED", "REDECLARE", "INNER", 
                      "OUTER", "INITIAL", "IDENT", "STRING", "UNSIGNED_NUMBER", 
                      "COMMENT", "WS" ]

    RULE_stored_definition = 0
    RULE_stored_definition_class = 1
    RULE_class_definition = 2
    RULE_class_prefixes = 3
    RULE_class_type = 4
    RULE_class_specifier = 5
    RULE_base_prefix = 6
    RULE_enum_list = 7
    RULE_enumeration_literal = 8
    RULE_composition = 9
    RULE_language_specification = 10
    RULE_external_function_call = 11
    RULE_element_list = 12
    RULE_element = 13
    RULE_regular_element = 14
    RULE_replaceable_element = 15
    RULE_import_clause = 16
    RULE_import_list = 17
    RULE_extends_clause = 18
    RULE_constraining_clause = 19
    RULE_component_clause = 20
    RULE_type_prefix = 21
    RULE_type_specifier = 22
    RULE_component_list = 23
    RULE_component_declaration = 24
    RULE_condition_attribute = 25
    RULE_declaration = 26
    RULE_modification = 27
    RULE_class_modification = 28
    RULE_argument_list = 29
    RULE_argument = 30
    RULE_element_modification_or_replaceable = 31
    RULE_element_modification = 32
    RULE_element_redeclaration = 33
    RULE_element_replaceable = 34
    RULE_component_clause1 = 35
    RULE_component_declaration1 = 36
    RULE_short_class_definition = 37
    RULE_equation_section = 38
    RULE_algorithm_section = 39
    RULE_equation_options = 40
    RULE_equation = 41
    RULE_statement_options = 42
    RULE_statement = 43
    RULE_if_equation = 44
    RULE_if_statement = 45
    RULE_for_equation = 46
    RULE_for_statement = 47
    RULE_for_indices = 48
    RULE_for_index = 49
    RULE_while_statement = 50
    RULE_when_equation = 51
    RULE_when_statement = 52
    RULE_connect_clause = 53
    RULE_expression = 54
    RULE_simple_expression = 55
    RULE_expr = 56
    RULE_primary = 57
    RULE_name = 58
    RULE_component_reference = 59
    RULE_function_call_args = 60
    RULE_function_arguments = 61
    RULE_named_arguments = 62
    RULE_named_argument = 63
    RULE_function_argument = 64
    RULE_output_expression_list = 65
    RULE_expression_list = 66
    RULE_array_subscripts = 67
    RULE_subscript = 68
    RULE_comment = 69
    RULE_string_comment = 70
    RULE_annotation = 71

    ruleNames =  [ "stored_definition", "stored_definition_class", "class_definition", 
                   "class_prefixes", "class_type", "class_specifier", "base_prefix", 
                   "enum_list", "enumeration_literal", "composition", "language_specification", 
                   "external_function_call", "element_list", "element", 
                   "regular_element", "replaceable_element", "import_clause", 
                   "import_list", "extends_clause", "constraining_clause", 
                   "component_clause", "type_prefix", "type_specifier", 
                   "component_list", "component_declaration", "condition_attribute", 
                   "declaration", "modification", "class_modification", 
                   "argument_list", "argument", "element_modification_or_replaceable", 
                   "element_modification", "element_redeclaration", "element_replaceable", 
                   "component_clause1", "component_declaration1", "short_class_definition", 
                   "equation_section", "algorithm_section", "equation_options", 
                   "equation", "statement_options", "statement", "if_equation", 
                   "if_statement", "for_equation", "for_statement", "for_indices", 
                   "for_index", "while_statement", "when_equation", "when_statement", 
                   "connect_clause", "expression", "simple_expression", 
                   "expr", "primary", "name", "component_reference", "function_call_args", 
                   "function_arguments", "named_arguments", "named_argument", 
                   "function_argument", "output_expression_list", "expression_list", 
                   "array_subscripts", "subscript", "comment", "string_comment", 
                   "annotation" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    EACH=79
    PARTIAL=80
    FINAL=81
    WITHIN=82
    ENCAPSULATED=83
    REDECLARE=84
    INNER=85
    OUTER=86
    INITIAL=87
    IDENT=88
    STRING=89
    UNSIGNED_NUMBER=90
    COMMENT=91
    WS=92

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Stored_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(ModelicaParser.WITHIN, 0)

        def stored_definition_class(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Stored_definition_classContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Stored_definition_classContext,i)


        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_stored_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStored_definition" ):
                listener.enterStored_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStored_definition" ):
                listener.exitStored_definition(self)




    def stored_definition(self):

        localctx = ModelicaParser.Stored_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stored_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.WITHIN:
                self.state = 144
                self.match(ModelicaParser.WITHIN)
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__27 or _la==ModelicaParser.IDENT:
                    self.state = 145
                    self.component_reference()


                self.state = 148
                self.match(ModelicaParser.T__0)


            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__1) | (1 << ModelicaParser.T__2) | (1 << ModelicaParser.T__3) | (1 << ModelicaParser.T__4) | (1 << ModelicaParser.T__5) | (1 << ModelicaParser.T__6) | (1 << ModelicaParser.T__7) | (1 << ModelicaParser.T__8) | (1 << ModelicaParser.T__9) | (1 << ModelicaParser.T__10) | (1 << ModelicaParser.T__11) | (1 << ModelicaParser.T__12))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (ModelicaParser.PARTIAL - 80)) | (1 << (ModelicaParser.FINAL - 80)) | (1 << (ModelicaParser.ENCAPSULATED - 80)))) != 0):
                self.state = 151
                self.stored_definition_class()
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stored_definition_classContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(ModelicaParser.Class_definitionContext,0)


        def FINAL(self):
            return self.getToken(ModelicaParser.FINAL, 0)

        def getRuleIndex(self):
            return ModelicaParser.RULE_stored_definition_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStored_definition_class" ):
                listener.enterStored_definition_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStored_definition_class" ):
                listener.exitStored_definition_class(self)




    def stored_definition_class(self):

        localctx = ModelicaParser.Stored_definition_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stored_definition_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.FINAL:
                self.state = 157
                self.match(ModelicaParser.FINAL)


            self.state = 160
            self.class_definition()
            self.state = 161
            self.match(ModelicaParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(ModelicaParser.Class_prefixesContext,0)


        def class_specifier(self):
            return self.getTypedRuleContext(ModelicaParser.Class_specifierContext,0)


        def ENCAPSULATED(self):
            return self.getToken(ModelicaParser.ENCAPSULATED, 0)

        def getRuleIndex(self):
            return ModelicaParser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = ModelicaParser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.ENCAPSULATED:
                self.state = 163
                self.match(ModelicaParser.ENCAPSULATED)


            self.state = 166
            self.class_prefixes()
            self.state = 167
            self.class_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_prefixesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(ModelicaParser.Class_typeContext,0)


        def PARTIAL(self):
            return self.getToken(ModelicaParser.PARTIAL, 0)

        def getRuleIndex(self):
            return ModelicaParser.RULE_class_prefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefixes" ):
                listener.enterClass_prefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefixes" ):
                listener.exitClass_prefixes(self)




    def class_prefixes(self):

        localctx = ModelicaParser.Class_prefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_class_prefixes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.PARTIAL:
                self.state = 169
                self.match(ModelicaParser.PARTIAL)


            self.state = 172
            self.class_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = ModelicaParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_class_type)
        self._la = 0 # Token type
        try:
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.match(ModelicaParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.match(ModelicaParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__3:
                    self.state = 176
                    self.match(ModelicaParser.T__3)


                self.state = 179
                self.match(ModelicaParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 180
                self.match(ModelicaParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__6:
                    self.state = 181
                    self.match(ModelicaParser.T__6)


                self.state = 184
                self.match(ModelicaParser.T__7)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 185
                self.match(ModelicaParser.T__8)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 186
                self.match(ModelicaParser.T__9)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__10 or _la==ModelicaParser.T__11:
                    self.state = 187
                    _la = self._input.LA(1)
                    if not(_la==ModelicaParser.T__10 or _la==ModelicaParser.T__11):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__3:
                    self.state = 190
                    self.match(ModelicaParser.T__3)


                self.state = 193
                self.match(ModelicaParser.T__12)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 194
                self.match(ModelicaParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_class_specifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Class_spec_derContext(Class_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Class_specifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(ModelicaParser.IDENT)
            else:
                return self.getToken(ModelicaParser.IDENT, i)
        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)

        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_spec_der" ):
                listener.enterClass_spec_der(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_spec_der" ):
                listener.exitClass_spec_der(self)


    class Class_spec_enumContext(Class_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Class_specifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)
        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)

        def enum_list(self):
            return self.getTypedRuleContext(ModelicaParser.Enum_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_spec_enum" ):
                listener.enterClass_spec_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_spec_enum" ):
                listener.exitClass_spec_enum(self)


    class Class_spec_baseContext(Class_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Class_specifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)
        def base_prefix(self):
            return self.getTypedRuleContext(ModelicaParser.Base_prefixContext,0)

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)

        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)

        def array_subscripts(self):
            return self.getTypedRuleContext(ModelicaParser.Array_subscriptsContext,0)

        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_spec_base" ):
                listener.enterClass_spec_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_spec_base" ):
                listener.exitClass_spec_base(self)


    class Class_spec_compContext(Class_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Class_specifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(ModelicaParser.IDENT)
            else:
                return self.getToken(ModelicaParser.IDENT, i)
        def string_comment(self):
            return self.getTypedRuleContext(ModelicaParser.String_commentContext,0)

        def composition(self):
            return self.getTypedRuleContext(ModelicaParser.CompositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_spec_comp" ):
                listener.enterClass_spec_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_spec_comp" ):
                listener.exitClass_spec_comp(self)


    class Class_spec_extendsContext(Class_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Class_specifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(ModelicaParser.IDENT)
            else:
                return self.getToken(ModelicaParser.IDENT, i)
        def string_comment(self):
            return self.getTypedRuleContext(ModelicaParser.String_commentContext,0)

        def composition(self):
            return self.getTypedRuleContext(ModelicaParser.CompositionContext,0)

        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_spec_extends" ):
                listener.enterClass_spec_extends(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_spec_extends" ):
                listener.exitClass_spec_extends(self)



    def class_specifier(self):

        localctx = ModelicaParser.Class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_class_specifier)
        self._la = 0 # Token type
        try:
            self.state = 254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = ModelicaParser.Class_spec_compContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self.match(ModelicaParser.IDENT)
                self.state = 198
                self.string_comment()
                self.state = 199
                self.composition()
                self.state = 200
                self.match(ModelicaParser.T__13)
                self.state = 201
                self.match(ModelicaParser.IDENT)
                pass

            elif la_ == 2:
                localctx = ModelicaParser.Class_spec_baseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 203
                self.match(ModelicaParser.IDENT)
                self.state = 204
                self.match(ModelicaParser.T__14)
                self.state = 205
                self.base_prefix()
                self.state = 206
                self.name()
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__75:
                    self.state = 207
                    self.array_subscripts()


                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__16:
                    self.state = 210
                    self.class_modification()


                self.state = 213
                self.comment()
                pass

            elif la_ == 3:
                localctx = ModelicaParser.Class_spec_enumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 215
                self.match(ModelicaParser.IDENT)
                self.state = 216
                self.match(ModelicaParser.T__14)
                self.state = 217
                self.match(ModelicaParser.T__15)
                self.state = 218
                self.match(ModelicaParser.T__16)
                self.state = 223
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ModelicaParser.T__18, ModelicaParser.IDENT]:
                    self.state = 220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ModelicaParser.IDENT:
                        self.state = 219
                        self.enum_list()


                    pass
                elif token in [ModelicaParser.T__17]:
                    self.state = 222
                    self.match(ModelicaParser.T__17)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 225
                self.match(ModelicaParser.T__18)
                self.state = 226
                self.comment()
                pass

            elif la_ == 4:
                localctx = ModelicaParser.Class_spec_derContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.match(ModelicaParser.IDENT)
                self.state = 228
                self.match(ModelicaParser.T__14)
                self.state = 229
                self.match(ModelicaParser.T__19)
                self.state = 230
                self.match(ModelicaParser.T__16)
                self.state = 231
                self.name()
                self.state = 232
                self.match(ModelicaParser.T__20)
                self.state = 233
                self.match(ModelicaParser.IDENT)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ModelicaParser.T__20:
                    self.state = 234
                    self.match(ModelicaParser.T__20)
                    self.state = 235
                    self.match(ModelicaParser.IDENT)
                    self.state = 240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 241
                self.match(ModelicaParser.T__18)
                self.state = 242
                self.comment()
                pass

            elif la_ == 5:
                localctx = ModelicaParser.Class_spec_extendsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 244
                self.match(ModelicaParser.T__21)
                self.state = 245
                self.match(ModelicaParser.IDENT)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__16:
                    self.state = 246
                    self.class_modification()


                self.state = 249
                self.string_comment()
                self.state = 250
                self.composition()
                self.state = 251
                self.match(ModelicaParser.T__13)
                self.state = 252
                self.match(ModelicaParser.IDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(ModelicaParser.Type_prefixContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_base_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_prefix" ):
                listener.enterBase_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_prefix" ):
                listener.exitBase_prefix(self)




    def base_prefix(self):

        localctx = ModelicaParser.Base_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_base_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.type_prefix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Enumeration_literalContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Enumeration_literalContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_enum_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_list" ):
                listener.enterEnum_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_list" ):
                listener.exitEnum_list(self)




    def enum_list(self):

        localctx = ModelicaParser.Enum_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_enum_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.enumeration_literal()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 259
                self.match(ModelicaParser.T__20)
                self.state = 260
                self.enumeration_literal()
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enumeration_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_enumeration_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_literal" ):
                listener.enterEnumeration_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_literal" ):
                listener.exitEnumeration_literal(self)




    def enumeration_literal(self):

        localctx = ModelicaParser.Enumeration_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_enumeration_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(ModelicaParser.IDENT)
            self.state = 267
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.epriv = None # Element_listContext
            self.epub = None # Element_listContext
            self.epro = None # Element_listContext
            self.ext_annotation = None # AnnotationContext
            self.comp_annotation = None # AnnotationContext

        def element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Element_listContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Element_listContext,i)


        def equation_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Equation_sectionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Equation_sectionContext,i)


        def algorithm_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Algorithm_sectionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Algorithm_sectionContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.AnnotationContext,i)


        def language_specification(self):
            return self.getTypedRuleContext(ModelicaParser.Language_specificationContext,0)


        def external_function_call(self):
            return self.getTypedRuleContext(ModelicaParser.External_function_callContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)




    def composition(self):

        localctx = ModelicaParser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            localctx.epriv = self.element_list()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__22) | (1 << ModelicaParser.T__23) | (1 << ModelicaParser.T__41) | (1 << ModelicaParser.T__42))) != 0) or _la==ModelicaParser.INITIAL:
                self.state = 276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 270
                    self.match(ModelicaParser.T__22)
                    self.state = 271
                    localctx.epub = self.element_list()
                    pass

                elif la_ == 2:
                    self.state = 272
                    self.match(ModelicaParser.T__23)
                    self.state = 273
                    localctx.epro = self.element_list()
                    pass

                elif la_ == 3:
                    self.state = 274
                    self.equation_section()
                    pass

                elif la_ == 4:
                    self.state = 275
                    self.algorithm_section()
                    pass


                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__24:
                self.state = 281
                self.match(ModelicaParser.T__24)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.STRING:
                    self.state = 282
                    self.language_specification()


                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__27 or _la==ModelicaParser.IDENT:
                    self.state = 285
                    self.external_function_call()


                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__77:
                    self.state = 288
                    localctx.ext_annotation = self.annotation()


                self.state = 291
                self.match(ModelicaParser.T__17)


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__77:
                self.state = 294
                localctx.comp_annotation = self.annotation()
                self.state = 295
                self.match(ModelicaParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Language_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ModelicaParser.STRING, 0)

        def getRuleIndex(self):
            return ModelicaParser.RULE_language_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage_specification" ):
                listener.enterLanguage_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage_specification" ):
                listener.exitLanguage_specification(self)




    def language_specification(self):

        localctx = ModelicaParser.Language_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_language_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(ModelicaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ModelicaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_external_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_call" ):
                listener.enterExternal_function_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_call" ):
                listener.exitExternal_function_call(self)




    def external_function_call(self):

        localctx = ModelicaParser.External_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_external_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 301
                self.component_reference()
                self.state = 302
                self.match(ModelicaParser.T__14)


            self.state = 306
            self.match(ModelicaParser.IDENT)
            self.state = 307
            self.match(ModelicaParser.T__16)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__13) | (1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__19) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__29) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__55))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ModelicaParser.T__70 - 71)) | (1 << (ModelicaParser.T__73 - 71)) | (1 << (ModelicaParser.T__74 - 71)) | (1 << (ModelicaParser.T__75 - 71)) | (1 << (ModelicaParser.INITIAL - 71)) | (1 << (ModelicaParser.IDENT - 71)) | (1 << (ModelicaParser.STRING - 71)) | (1 << (ModelicaParser.UNSIGNED_NUMBER - 71)))) != 0):
                self.state = 308
                self.expression_list()


            self.state = 311
            self.match(ModelicaParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ElementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ElementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_list" ):
                listener.enterElement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_list" ):
                listener.exitElement_list(self)




    def element_list(self):

        localctx = ModelicaParser.Element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__1) | (1 << ModelicaParser.T__2) | (1 << ModelicaParser.T__3) | (1 << ModelicaParser.T__4) | (1 << ModelicaParser.T__5) | (1 << ModelicaParser.T__6) | (1 << ModelicaParser.T__7) | (1 << ModelicaParser.T__8) | (1 << ModelicaParser.T__9) | (1 << ModelicaParser.T__10) | (1 << ModelicaParser.T__11) | (1 << ModelicaParser.T__12) | (1 << ModelicaParser.T__21) | (1 << ModelicaParser.T__25) | (1 << ModelicaParser.T__26) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__32) | (1 << ModelicaParser.T__33) | (1 << ModelicaParser.T__34) | (1 << ModelicaParser.T__35) | (1 << ModelicaParser.T__36) | (1 << ModelicaParser.T__37) | (1 << ModelicaParser.T__38))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (ModelicaParser.PARTIAL - 80)) | (1 << (ModelicaParser.FINAL - 80)) | (1 << (ModelicaParser.ENCAPSULATED - 80)) | (1 << (ModelicaParser.REDECLARE - 80)) | (1 << (ModelicaParser.INNER - 80)) | (1 << (ModelicaParser.OUTER - 80)) | (1 << (ModelicaParser.IDENT - 80)))) != 0):
                self.state = 313
                self.element()
                self.state = 314
                self.match(ModelicaParser.T__0)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Import_clauseContext,0)


        def extends_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Extends_clauseContext,0)


        def regular_element(self):
            return self.getTypedRuleContext(ModelicaParser.Regular_elementContext,0)


        def replaceable_element(self):
            return self.getTypedRuleContext(ModelicaParser.Replaceable_elementContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = ModelicaParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_element)
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.import_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.extends_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.regular_element()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 324
                self.replaceable_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Regular_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.class_elem = None # Class_definitionContext
            self.comp_elem = None # Component_clauseContext

        def REDECLARE(self):
            return self.getToken(ModelicaParser.REDECLARE, 0)

        def FINAL(self):
            return self.getToken(ModelicaParser.FINAL, 0)

        def INNER(self):
            return self.getToken(ModelicaParser.INNER, 0)

        def OUTER(self):
            return self.getToken(ModelicaParser.OUTER, 0)

        def class_definition(self):
            return self.getTypedRuleContext(ModelicaParser.Class_definitionContext,0)


        def component_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Component_clauseContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_regular_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_element" ):
                listener.enterRegular_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_element" ):
                listener.exitRegular_element(self)




    def regular_element(self):

        localctx = ModelicaParser.Regular_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_regular_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.REDECLARE:
                self.state = 327
                self.match(ModelicaParser.REDECLARE)


            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.FINAL:
                self.state = 330
                self.match(ModelicaParser.FINAL)


            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.INNER:
                self.state = 333
                self.match(ModelicaParser.INNER)


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.OUTER:
                self.state = 336
                self.match(ModelicaParser.OUTER)


            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__1, ModelicaParser.T__2, ModelicaParser.T__3, ModelicaParser.T__4, ModelicaParser.T__5, ModelicaParser.T__6, ModelicaParser.T__7, ModelicaParser.T__8, ModelicaParser.T__9, ModelicaParser.T__10, ModelicaParser.T__11, ModelicaParser.T__12, ModelicaParser.PARTIAL, ModelicaParser.ENCAPSULATED]:
                self.state = 339
                localctx.class_elem = self.class_definition()
                pass
            elif token in [ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.IDENT]:
                self.state = 340
                localctx.comp_elem = self.component_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Replaceable_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.class_elem = None # Class_definitionContext
            self.comp_elem = None # Component_clauseContext

        def REDECLARE(self):
            return self.getToken(ModelicaParser.REDECLARE, 0)

        def FINAL(self):
            return self.getToken(ModelicaParser.FINAL, 0)

        def INNER(self):
            return self.getToken(ModelicaParser.INNER, 0)

        def OUTER(self):
            return self.getToken(ModelicaParser.OUTER, 0)

        def class_definition(self):
            return self.getTypedRuleContext(ModelicaParser.Class_definitionContext,0)


        def component_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Component_clauseContext,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Constraining_clauseContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_replaceable_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceable_element" ):
                listener.enterReplaceable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceable_element" ):
                listener.exitReplaceable_element(self)




    def replaceable_element(self):

        localctx = ModelicaParser.Replaceable_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_replaceable_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.REDECLARE:
                self.state = 343
                self.match(ModelicaParser.REDECLARE)


            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.FINAL:
                self.state = 346
                self.match(ModelicaParser.FINAL)


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.INNER:
                self.state = 349
                self.match(ModelicaParser.INNER)


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.OUTER:
                self.state = 352
                self.match(ModelicaParser.OUTER)


            self.state = 355
            self.match(ModelicaParser.T__25)
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__1, ModelicaParser.T__2, ModelicaParser.T__3, ModelicaParser.T__4, ModelicaParser.T__5, ModelicaParser.T__6, ModelicaParser.T__7, ModelicaParser.T__8, ModelicaParser.T__9, ModelicaParser.T__10, ModelicaParser.T__11, ModelicaParser.T__12, ModelicaParser.PARTIAL, ModelicaParser.ENCAPSULATED]:
                self.state = 356
                localctx.class_elem = self.class_definition()
                pass
            elif token in [ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.IDENT]:
                self.state = 357
                localctx.comp_elem = self.component_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__31:
                self.state = 360
                self.constraining_clause()
                self.state = 361
                self.comment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def import_list(self):
            return self.getTypedRuleContext(ModelicaParser.Import_listContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_import_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_clause" ):
                listener.enterImport_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_clause" ):
                listener.exitImport_clause(self)




    def import_clause(self):

        localctx = ModelicaParser.Import_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_import_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(ModelicaParser.T__26)
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 366
                self.match(ModelicaParser.IDENT)
                self.state = 367
                self.match(ModelicaParser.T__14)
                self.state = 368
                self.component_reference()
                pass

            elif la_ == 2:
                self.state = 369
                self.component_reference()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__27:
                    self.state = 370
                    self.match(ModelicaParser.T__27)
                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ModelicaParser.T__28]:
                        self.state = 371
                        self.match(ModelicaParser.T__28)
                        pass
                    elif token in [ModelicaParser.T__29]:
                        self.state = 372
                        self.match(ModelicaParser.T__29)
                        self.state = 373
                        self.import_list()
                        self.state = 374
                        self.match(ModelicaParser.T__30)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 382
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def import_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Import_listContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Import_listContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_import_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_list" ):
                listener.enterImport_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_list" ):
                listener.exitImport_list(self)




    def import_list(self):

        localctx = ModelicaParser.Import_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_import_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(ModelicaParser.IDENT)
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 385
                    self.match(ModelicaParser.T__20)
                    self.state = 386
                    self.import_list() 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extends_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def annotation(self):
            return self.getTypedRuleContext(ModelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_extends_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtends_clause" ):
                listener.enterExtends_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtends_clause" ):
                listener.exitExtends_clause(self)




    def extends_clause(self):

        localctx = ModelicaParser.Extends_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_extends_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(ModelicaParser.T__21)
            self.state = 393
            self.component_reference()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__16:
                self.state = 394
                self.class_modification()


            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__77:
                self.state = 397
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraining_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_constraining_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraining_clause" ):
                listener.enterConstraining_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraining_clause" ):
                listener.exitConstraining_clause(self)




    def constraining_clause(self):

        localctx = ModelicaParser.Constraining_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constraining_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(ModelicaParser.T__31)
            self.state = 401
            self.name()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__16:
                self.state = 402
                self.class_modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(ModelicaParser.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(ModelicaParser.Type_specifierContext,0)


        def component_list(self):
            return self.getTypedRuleContext(ModelicaParser.Component_listContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(ModelicaParser.Array_subscriptsContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause" ):
                listener.enterComponent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause" ):
                listener.exitComponent_clause(self)




    def component_clause(self):

        localctx = ModelicaParser.Component_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_component_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.type_prefix()
            self.state = 406
            self.type_specifier()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__75:
                self.state = 407
                self.array_subscripts()


            self.state = 410
            self.component_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_type_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix" ):
                listener.enterType_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix" ):
                listener.exitType_prefix(self)




    def type_prefix(self):

        localctx = ModelicaParser.Type_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_type_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__32 or _la==ModelicaParser.T__33:
                self.state = 412
                _la = self._input.LA(1)
                if not(_la==ModelicaParser.T__32 or _la==ModelicaParser.T__33):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__34) | (1 << ModelicaParser.T__35) | (1 << ModelicaParser.T__36))) != 0):
                self.state = 415
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__34) | (1 << ModelicaParser.T__35) | (1 << ModelicaParser.T__36))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__37 or _la==ModelicaParser.T__38:
                self.state = 418
                _la = self._input.LA(1)
                if not(_la==ModelicaParser.T__37 or _la==ModelicaParser.T__38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)




    def type_specifier(self):

        localctx = ModelicaParser.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Component_declarationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Component_declarationContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_list" ):
                listener.enterComponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_list" ):
                listener.exitComponent_list(self)




    def component_list(self):

        localctx = ModelicaParser.Component_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_component_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.component_declaration()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 424
                self.match(ModelicaParser.T__20)
                self.state = 425
                self.component_declaration()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(ModelicaParser.DeclarationContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def condition_attribute(self):
            return self.getTypedRuleContext(ModelicaParser.Condition_attributeContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration" ):
                listener.enterComponent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration" ):
                listener.exitComponent_declaration(self)




    def component_declaration(self):

        localctx = ModelicaParser.Component_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_component_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.declaration()
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__39:
                self.state = 432
                self.condition_attribute()


            self.state = 435
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Condition_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_condition_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_attribute" ):
                listener.enterCondition_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_attribute" ):
                listener.exitCondition_attribute(self)




    def condition_attribute(self):

        localctx = ModelicaParser.Condition_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(ModelicaParser.T__39)
            self.state = 438
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(ModelicaParser.Array_subscriptsContext,0)


        def modification(self):
            return self.getTypedRuleContext(ModelicaParser.ModificationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ModelicaParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(ModelicaParser.IDENT)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__75:
                self.state = 441
                self.array_subscripts()


            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__14) | (1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__40))) != 0):
                self.state = 444
                self.modification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_modification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Modification_classContext(ModificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ModificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification_class" ):
                listener.enterModification_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification_class" ):
                listener.exitModification_class(self)


    class Modification_assignment2Context(ModificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ModificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification_assignment2" ):
                listener.enterModification_assignment2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification_assignment2" ):
                listener.exitModification_assignment2(self)


    class Modification_assignmentContext(ModificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ModificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModification_assignment" ):
                listener.enterModification_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModification_assignment" ):
                listener.exitModification_assignment(self)



    def modification(self):

        localctx = ModelicaParser.ModificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modification)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__16]:
                localctx = ModelicaParser.Modification_classContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.class_modification()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__14:
                    self.state = 448
                    self.match(ModelicaParser.T__14)
                    self.state = 449
                    self.expression()


                pass
            elif token in [ModelicaParser.T__14]:
                localctx = ModelicaParser.Modification_assignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.match(ModelicaParser.T__14)
                self.state = 453
                self.expression()
                pass
            elif token in [ModelicaParser.T__40]:
                localctx = ModelicaParser.Modification_assignment2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 454
                self.match(ModelicaParser.T__40)
                self.state = 455
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(ModelicaParser.Argument_listContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_class_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modification" ):
                listener.enterClass_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modification" ):
                listener.exitClass_modification(self)




    def class_modification(self):

        localctx = ModelicaParser.Class_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_class_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(ModelicaParser.T__16)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (ModelicaParser.T__25 - 26)) | (1 << (ModelicaParser.T__27 - 26)) | (1 << (ModelicaParser.EACH - 26)) | (1 << (ModelicaParser.FINAL - 26)) | (1 << (ModelicaParser.REDECLARE - 26)) | (1 << (ModelicaParser.IDENT - 26)))) != 0):
                self.state = 459
                self.argument_list()


            self.state = 462
            self.match(ModelicaParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ArgumentContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = ModelicaParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.argument()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 465
                self.match(ModelicaParser.T__20)
                self.state = 466
                self.argument()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification_or_replaceable(self):
            return self.getTypedRuleContext(ModelicaParser.Element_modification_or_replaceableContext,0)


        def element_redeclaration(self):
            return self.getTypedRuleContext(ModelicaParser.Element_redeclarationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = ModelicaParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_argument)
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__25, ModelicaParser.T__27, ModelicaParser.EACH, ModelicaParser.FINAL, ModelicaParser.IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.element_modification_or_replaceable()
                pass
            elif token in [ModelicaParser.REDECLARE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.element_redeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modification_or_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Element_modificationContext,0)


        def element_replaceable(self):
            return self.getTypedRuleContext(ModelicaParser.Element_replaceableContext,0)


        def EACH(self):
            return self.getToken(ModelicaParser.EACH, 0)

        def FINAL(self):
            return self.getToken(ModelicaParser.FINAL, 0)

        def getRuleIndex(self):
            return ModelicaParser.RULE_element_modification_or_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification_or_replaceable" ):
                listener.enterElement_modification_or_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification_or_replaceable" ):
                listener.exitElement_modification_or_replaceable(self)




    def element_modification_or_replaceable(self):

        localctx = ModelicaParser.Element_modification_or_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_element_modification_or_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.EACH:
                self.state = 476
                self.match(ModelicaParser.EACH)


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.FINAL:
                self.state = 479
                self.match(ModelicaParser.FINAL)


            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__27, ModelicaParser.IDENT]:
                self.state = 482
                self.element_modification()
                pass
            elif token in [ModelicaParser.T__25]:
                self.state = 483
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_modificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)


        def string_comment(self):
            return self.getTypedRuleContext(ModelicaParser.String_commentContext,0)


        def modification(self):
            return self.getTypedRuleContext(ModelicaParser.ModificationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_element_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_modification" ):
                listener.enterElement_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_modification" ):
                listener.exitElement_modification(self)




    def element_modification(self):

        localctx = ModelicaParser.Element_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_element_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.name()
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__14) | (1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__40))) != 0):
                self.state = 487
                self.modification()


            self.state = 490
            self.string_comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_redeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDECLARE(self):
            return self.getToken(ModelicaParser.REDECLARE, 0)

        def element_replaceable(self):
            return self.getTypedRuleContext(ModelicaParser.Element_replaceableContext,0)


        def EACH(self):
            return self.getToken(ModelicaParser.EACH, 0)

        def FINAL(self):
            return self.getToken(ModelicaParser.FINAL, 0)

        def short_class_definition(self):
            return self.getTypedRuleContext(ModelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(ModelicaParser.Component_clause1Context,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_element_redeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_redeclaration" ):
                listener.enterElement_redeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_redeclaration" ):
                listener.exitElement_redeclaration(self)




    def element_redeclaration(self):

        localctx = ModelicaParser.Element_redeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_element_redeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(ModelicaParser.REDECLARE)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.EACH:
                self.state = 493
                self.match(ModelicaParser.EACH)


            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.FINAL:
                self.state = 496
                self.match(ModelicaParser.FINAL)


            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__1, ModelicaParser.T__2, ModelicaParser.T__3, ModelicaParser.T__4, ModelicaParser.T__5, ModelicaParser.T__6, ModelicaParser.T__7, ModelicaParser.T__8, ModelicaParser.T__9, ModelicaParser.T__10, ModelicaParser.T__11, ModelicaParser.T__12, ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.PARTIAL, ModelicaParser.IDENT]:
                self.state = 501
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ModelicaParser.T__1, ModelicaParser.T__2, ModelicaParser.T__3, ModelicaParser.T__4, ModelicaParser.T__5, ModelicaParser.T__6, ModelicaParser.T__7, ModelicaParser.T__8, ModelicaParser.T__9, ModelicaParser.T__10, ModelicaParser.T__11, ModelicaParser.T__12, ModelicaParser.PARTIAL]:
                    self.state = 499
                    self.short_class_definition()
                    pass
                elif token in [ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.IDENT]:
                    self.state = 500
                    self.component_clause1()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ModelicaParser.T__25]:
                self.state = 503
                self.element_replaceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_replaceableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def short_class_definition(self):
            return self.getTypedRuleContext(ModelicaParser.Short_class_definitionContext,0)


        def component_clause1(self):
            return self.getTypedRuleContext(ModelicaParser.Component_clause1Context,0)


        def constraining_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Constraining_clauseContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_element_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_replaceable" ):
                listener.enterElement_replaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_replaceable" ):
                listener.exitElement_replaceable(self)




    def element_replaceable(self):

        localctx = ModelicaParser.Element_replaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_element_replaceable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(ModelicaParser.T__25)
            self.state = 509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__1, ModelicaParser.T__2, ModelicaParser.T__3, ModelicaParser.T__4, ModelicaParser.T__5, ModelicaParser.T__6, ModelicaParser.T__7, ModelicaParser.T__8, ModelicaParser.T__9, ModelicaParser.T__10, ModelicaParser.T__11, ModelicaParser.T__12, ModelicaParser.PARTIAL]:
                self.state = 507
                self.short_class_definition()
                pass
            elif token in [ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.IDENT]:
                self.state = 508
                self.component_clause1()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__31:
                self.state = 511
                self.constraining_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_clause1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_prefix(self):
            return self.getTypedRuleContext(ModelicaParser.Type_prefixContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(ModelicaParser.Type_specifierContext,0)


        def component_declaration1(self):
            return self.getTypedRuleContext(ModelicaParser.Component_declaration1Context,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_clause1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_clause1" ):
                listener.enterComponent_clause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_clause1" ):
                listener.exitComponent_clause1(self)




    def component_clause1(self):

        localctx = ModelicaParser.Component_clause1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_component_clause1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.type_prefix()
            self.state = 515
            self.type_specifier()
            self.state = 516
            self.component_declaration1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_declaration1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(ModelicaParser.DeclarationContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_declaration1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_declaration1" ):
                listener.enterComponent_declaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_declaration1" ):
                listener.exitComponent_declaration1(self)




    def component_declaration1(self):

        localctx = ModelicaParser.Component_declaration1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_component_declaration1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.declaration()
            self.state = 519
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Short_class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_prefixes(self):
            return self.getTypedRuleContext(ModelicaParser.Class_prefixesContext,0)


        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def base_prefix(self):
            return self.getTypedRuleContext(ModelicaParser.Base_prefixContext,0)


        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def array_subscripts(self):
            return self.getTypedRuleContext(ModelicaParser.Array_subscriptsContext,0)


        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def enum_list(self):
            return self.getTypedRuleContext(ModelicaParser.Enum_listContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_short_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShort_class_definition" ):
                listener.enterShort_class_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShort_class_definition" ):
                listener.exitShort_class_definition(self)




    def short_class_definition(self):

        localctx = ModelicaParser.Short_class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_short_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.class_prefixes()
            self.state = 522
            self.match(ModelicaParser.IDENT)
            self.state = 523
            self.match(ModelicaParser.T__14)
            self.state = 544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__27, ModelicaParser.T__32, ModelicaParser.T__33, ModelicaParser.T__34, ModelicaParser.T__35, ModelicaParser.T__36, ModelicaParser.T__37, ModelicaParser.T__38, ModelicaParser.IDENT]:
                self.state = 524
                self.base_prefix()
                self.state = 525
                self.name()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__75:
                    self.state = 526
                    self.array_subscripts()


                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__16:
                    self.state = 529
                    self.class_modification()


                self.state = 532
                self.comment()
                pass
            elif token in [ModelicaParser.T__15]:
                self.state = 534
                self.match(ModelicaParser.T__15)
                self.state = 535
                self.match(ModelicaParser.T__16)
                self.state = 540
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ModelicaParser.T__18, ModelicaParser.IDENT]:
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ModelicaParser.IDENT:
                        self.state = 536
                        self.enum_list()


                    pass
                elif token in [ModelicaParser.T__17]:
                    self.state = 539
                    self.match(ModelicaParser.T__17)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 542
                self.match(ModelicaParser.T__18)
                self.state = 543
                self.comment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equation_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL(self):
            return self.getToken(ModelicaParser.INITIAL, 0)

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_equation_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_section" ):
                listener.enterEquation_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_section" ):
                listener.exitEquation_section(self)




    def equation_section(self):

        localctx = ModelicaParser.Equation_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_equation_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.INITIAL:
                self.state = 546
                self.match(ModelicaParser.INITIAL)


            self.state = 549
            self.match(ModelicaParser.T__41)
            self.state = 555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 550
                    self.equation()
                    self.state = 551
                    self.match(ModelicaParser.T__0) 
                self.state = 557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Algorithm_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL(self):
            return self.getToken(ModelicaParser.INITIAL, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_algorithm_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm_section" ):
                listener.enterAlgorithm_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm_section" ):
                listener.exitAlgorithm_section(self)




    def algorithm_section(self):

        localctx = ModelicaParser.Algorithm_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_algorithm_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.INITIAL:
                self.state = 558
                self.match(ModelicaParser.INITIAL)


            self.state = 561
            self.match(ModelicaParser.T__42)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                self.state = 562
                self.statement()
                self.state = 563
                self.match(ModelicaParser.T__0)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equation_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_equation_options

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Equation_whenContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def when_equation(self):
            return self.getTypedRuleContext(ModelicaParser.When_equationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_when" ):
                listener.enterEquation_when(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_when" ):
                listener.exitEquation_when(self)


    class Equation_connect_clauseContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def connect_clause(self):
            return self.getTypedRuleContext(ModelicaParser.Connect_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_connect_clause" ):
                listener.enterEquation_connect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_connect_clause" ):
                listener.exitEquation_connect_clause(self)


    class Equation_forContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def for_equation(self):
            return self.getTypedRuleContext(ModelicaParser.For_equationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_for" ):
                listener.enterEquation_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_for" ):
                listener.exitEquation_for(self)


    class Equation_functionContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_function" ):
                listener.enterEquation_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_function" ):
                listener.exitEquation_function(self)


    class Equation_simpleContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simple_expression(self):
            return self.getTypedRuleContext(ModelicaParser.Simple_expressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_simple" ):
                listener.enterEquation_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_simple" ):
                listener.exitEquation_simple(self)


    class Equation_ifContext(Equation_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Equation_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def if_equation(self):
            return self.getTypedRuleContext(ModelicaParser.If_equationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation_if" ):
                listener.enterEquation_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation_if" ):
                listener.exitEquation_if(self)



    def equation_options(self):

        localctx = ModelicaParser.Equation_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_equation_options)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = ModelicaParser.Equation_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.simple_expression()
                self.state = 571
                self.match(ModelicaParser.T__14)
                self.state = 572
                self.expression()
                pass

            elif la_ == 2:
                localctx = ModelicaParser.Equation_ifContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.if_equation()
                pass

            elif la_ == 3:
                localctx = ModelicaParser.Equation_forContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 575
                self.for_equation()
                pass

            elif la_ == 4:
                localctx = ModelicaParser.Equation_connect_clauseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 576
                self.connect_clause()
                pass

            elif la_ == 5:
                localctx = ModelicaParser.Equation_whenContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 577
                self.when_equation()
                pass

            elif la_ == 6:
                localctx = ModelicaParser.Equation_functionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 578
                self.name()
                self.state = 579
                self.function_call_args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EquationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation_options(self):
            return self.getTypedRuleContext(ModelicaParser.Equation_optionsContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquation" ):
                listener.enterEquation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquation" ):
                listener.exitEquation(self)




    def equation(self):

        localctx = ModelicaParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.equation_options()
            self.state = 584
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_statement_options

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Statement_breakContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_break" ):
                listener.enterStatement_break(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_break" ):
                listener.exitStatement_break(self)


    class Statement_whileContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def while_statement(self):
            return self.getTypedRuleContext(ModelicaParser.While_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_while" ):
                listener.enterStatement_while(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_while" ):
                listener.exitStatement_while(self)


    class Statement_component_functionContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def output_expression_list(self):
            return self.getTypedRuleContext(ModelicaParser.Output_expression_listContext,0)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_component_function" ):
                listener.enterStatement_component_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_component_function" ):
                listener.exitStatement_component_function(self)


    class Statement_returnContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_return" ):
                listener.enterStatement_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_return" ):
                listener.exitStatement_return(self)


    class Statement_forContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def for_statement(self):
            return self.getTypedRuleContext(ModelicaParser.For_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_for" ):
                listener.enterStatement_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_for" ):
                listener.exitStatement_for(self)


    class Statement_whenContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def when_statement(self):
            return self.getTypedRuleContext(ModelicaParser.When_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_when" ):
                listener.enterStatement_when(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_when" ):
                listener.exitStatement_when(self)


    class Statement_ifContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def if_statement(self):
            return self.getTypedRuleContext(ModelicaParser.If_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_if" ):
                listener.enterStatement_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_if" ):
                listener.exitStatement_if(self)


    class Statement_component_referenceContext(Statement_optionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Statement_optionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_component_reference" ):
                listener.enterStatement_component_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_component_reference" ):
                listener.exitStatement_component_reference(self)



    def statement_options(self):

        localctx = ModelicaParser.Statement_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement_options)
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__27, ModelicaParser.IDENT]:
                localctx = ModelicaParser.Statement_component_referenceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self.component_reference()
                self.state = 590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ModelicaParser.T__40]:
                    self.state = 587
                    self.match(ModelicaParser.T__40)
                    self.state = 588
                    self.expression()
                    pass
                elif token in [ModelicaParser.T__16]:
                    self.state = 589
                    self.function_call_args()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ModelicaParser.T__16]:
                localctx = ModelicaParser.Statement_component_functionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.match(ModelicaParser.T__16)
                self.state = 593
                self.output_expression_list()
                self.state = 594
                self.match(ModelicaParser.T__18)
                self.state = 595
                self.match(ModelicaParser.T__40)
                self.state = 596
                self.component_reference()
                self.state = 597
                self.function_call_args()
                pass
            elif token in [ModelicaParser.T__43]:
                localctx = ModelicaParser.Statement_breakContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 599
                self.match(ModelicaParser.T__43)
                pass
            elif token in [ModelicaParser.T__44]:
                localctx = ModelicaParser.Statement_returnContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.match(ModelicaParser.T__44)
                pass
            elif token in [ModelicaParser.T__39]:
                localctx = ModelicaParser.Statement_ifContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                self.if_statement()
                pass
            elif token in [ModelicaParser.T__48]:
                localctx = ModelicaParser.Statement_forContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 602
                self.for_statement()
                pass
            elif token in [ModelicaParser.T__51]:
                localctx = ModelicaParser.Statement_whileContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 603
                self.while_statement()
                pass
            elif token in [ModelicaParser.T__52]:
                localctx = ModelicaParser.Statement_whenContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 604
                self.when_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_options(self):
            return self.getTypedRuleContext(ModelicaParser.Statement_optionsContext,0)


        def comment(self):
            return self.getTypedRuleContext(ModelicaParser.CommentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ModelicaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.statement_options()
            self.state = 608
            self.comment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_if_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_equation" ):
                listener.enterIf_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_equation" ):
                listener.exitIf_equation(self)




    def if_equation(self):

        localctx = ModelicaParser.If_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_if_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(ModelicaParser.T__39)
            self.state = 611
            self.expression()
            self.state = 612
            self.match(ModelicaParser.T__45)
            self.state = 618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 613
                    self.equation()
                    self.state = 614
                    self.match(ModelicaParser.T__0) 
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__46:
                self.state = 621
                self.match(ModelicaParser.T__46)
                self.state = 622
                self.expression()
                self.state = 623
                self.match(ModelicaParser.T__45)
                self.state = 629
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 624
                        self.equation()
                        self.state = 625
                        self.match(ModelicaParser.T__0) 
                    self.state = 631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__47:
                self.state = 637
                self.match(ModelicaParser.T__47)
                self.state = 643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 638
                        self.equation()
                        self.state = 639
                        self.match(ModelicaParser.T__0) 
                    self.state = 645
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)



            self.state = 648
            self.match(ModelicaParser.T__13)
            self.state = 649
            self.match(ModelicaParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = ModelicaParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(ModelicaParser.T__39)
            self.state = 652
            self.expression()
            self.state = 653
            self.match(ModelicaParser.T__45)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                self.state = 654
                self.statement()
                self.state = 655
                self.match(ModelicaParser.T__0)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__46:
                self.state = 662
                self.match(ModelicaParser.T__46)
                self.state = 663
                self.expression()
                self.state = 664
                self.match(ModelicaParser.T__45)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                    self.state = 665
                    self.statement()
                    self.state = 666
                    self.match(ModelicaParser.T__0)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__47:
                self.state = 678
                self.match(ModelicaParser.T__47)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                    self.state = 679
                    self.statement()
                    self.state = 680
                    self.match(ModelicaParser.T__0)
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 689
            self.match(ModelicaParser.T__13)
            self.state = 690
            self.match(ModelicaParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(ModelicaParser.For_indicesContext,0)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_for_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_equation" ):
                listener.enterFor_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_equation" ):
                listener.exitFor_equation(self)




    def for_equation(self):

        localctx = ModelicaParser.For_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_equation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(ModelicaParser.T__48)
            self.state = 693
            self.for_indices()
            self.state = 694
            self.match(ModelicaParser.T__49)
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 695
                    self.equation()
                    self.state = 696
                    self.match(ModelicaParser.T__0) 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 703
            self.match(ModelicaParser.T__13)
            self.state = 704
            self.match(ModelicaParser.T__48)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_indices(self):
            return self.getTypedRuleContext(ModelicaParser.For_indicesContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = ModelicaParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(ModelicaParser.T__48)
            self.state = 707
            self.for_indices()
            self.state = 708
            self.match(ModelicaParser.T__49)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                self.state = 709
                self.statement()
                self.state = 710
                self.match(ModelicaParser.T__0)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(ModelicaParser.T__13)
            self.state = 718
            self.match(ModelicaParser.T__48)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.For_indexContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.For_indexContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_for_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_indices" ):
                listener.enterFor_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_indices" ):
                listener.exitFor_indices(self)




    def for_indices(self):

        localctx = ModelicaParser.For_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_for_indices)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.for_index()
            self.state = 725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 721
                    self.match(ModelicaParser.T__20)
                    self.state = 722
                    self.for_index() 
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_for_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_index" ):
                listener.enterFor_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_index" ):
                listener.exitFor_index(self)




    def for_index(self):

        localctx = ModelicaParser.For_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_for_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(ModelicaParser.IDENT)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__50:
                self.state = 729
                self.match(ModelicaParser.T__50)
                self.state = 730
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = ModelicaParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_while_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(ModelicaParser.T__51)
            self.state = 734
            self.expression()
            self.state = 735
            self.match(ModelicaParser.T__49)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                self.state = 736
                self.statement()
                self.state = 737
                self.match(ModelicaParser.T__0)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.match(ModelicaParser.T__13)
            self.state = 745
            self.match(ModelicaParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_equationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.EquationContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.EquationContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_when_equation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_equation" ):
                listener.enterWhen_equation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_equation" ):
                listener.exitWhen_equation(self)




    def when_equation(self):

        localctx = ModelicaParser.When_equationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_when_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(ModelicaParser.T__52)
            self.state = 748
            self.expression()
            self.state = 749
            self.match(ModelicaParser.T__45)
            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 750
                    self.equation()
                    self.state = 751
                    self.match(ModelicaParser.T__0) 
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__53:
                self.state = 758
                self.match(ModelicaParser.T__53)
                self.state = 759
                self.expression()
                self.state = 760
                self.match(ModelicaParser.T__45)
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 761
                        self.equation()
                        self.state = 762
                        self.match(ModelicaParser.T__0) 
                    self.state = 768
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 774
            self.match(ModelicaParser.T__13)
            self.state = 775
            self.match(ModelicaParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class When_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.StatementContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.StatementContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_statement" ):
                listener.enterWhen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_statement" ):
                listener.exitWhen_statement(self)




    def when_statement(self):

        localctx = ModelicaParser.When_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(ModelicaParser.T__52)
            self.state = 778
            self.expression()
            self.state = 779
            self.match(ModelicaParser.T__45)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                self.state = 780
                self.statement()
                self.state = 781
                self.match(ModelicaParser.T__0)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__53:
                self.state = 788
                self.match(ModelicaParser.T__53)
                self.state = 789
                self.expression()
                self.state = 790
                self.match(ModelicaParser.T__45)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__43) | (1 << ModelicaParser.T__44) | (1 << ModelicaParser.T__48) | (1 << ModelicaParser.T__51) | (1 << ModelicaParser.T__52))) != 0) or _la==ModelicaParser.IDENT:
                    self.state = 791
                    self.statement()
                    self.state = 792
                    self.match(ModelicaParser.T__0)
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.match(ModelicaParser.T__13)
            self.state = 805
            self.match(ModelicaParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Component_referenceContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_connect_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect_clause" ):
                listener.enterConnect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect_clause" ):
                listener.exitConnect_clause(self)




    def connect_clause(self):

        localctx = ModelicaParser.Connect_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_connect_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(ModelicaParser.T__54)
            self.state = 808
            self.match(ModelicaParser.T__16)
            self.state = 809
            self.component_reference()
            self.state = 810
            self.match(ModelicaParser.T__20)
            self.state = 811
            self.component_reference()
            self.state = 812
            self.match(ModelicaParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Expression_ifContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_if" ):
                listener.enterExpression_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_if" ):
                listener.exitExpression_if(self)


    class Expression_simpleContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simple_expression(self):
            return self.getTypedRuleContext(ModelicaParser.Simple_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_simple" ):
                listener.enterExpression_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_simple" ):
                listener.exitExpression_simple(self)



    def expression(self):

        localctx = ModelicaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__13, ModelicaParser.T__16, ModelicaParser.T__19, ModelicaParser.T__27, ModelicaParser.T__29, ModelicaParser.T__55, ModelicaParser.T__70, ModelicaParser.T__73, ModelicaParser.T__74, ModelicaParser.T__75, ModelicaParser.INITIAL, ModelicaParser.IDENT, ModelicaParser.STRING, ModelicaParser.UNSIGNED_NUMBER]:
                localctx = ModelicaParser.Expression_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.simple_expression()
                pass
            elif token in [ModelicaParser.T__39]:
                localctx = ModelicaParser.Expression_ifContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(ModelicaParser.T__39)
                self.state = 816
                self.expression()
                self.state = 817
                self.match(ModelicaParser.T__45)
                self.state = 818
                self.expression()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ModelicaParser.T__46:
                    self.state = 819
                    self.match(ModelicaParser.T__46)
                    self.state = 820
                    self.expression()
                    self.state = 821
                    self.match(ModelicaParser.T__45)
                    self.state = 822
                    self.expression()
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 829
                self.match(ModelicaParser.T__47)
                self.state = 830
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_simple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expression" ):
                listener.enterSimple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expression" ):
                listener.exitSimple_expression(self)




    def simple_expression(self):

        localctx = ModelicaParser.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simple_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.expr(0)
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__17:
                self.state = 835
                self.match(ModelicaParser.T__17)
                self.state = 836
                self.expr(0)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.T__17:
                    self.state = 837
                    self.match(ModelicaParser.T__17)
                    self.state = 838
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Expr_negContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(ModelicaParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_neg" ):
                listener.enterExpr_neg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_neg" ):
                listener.exitExpr_neg(self)


    class Expr_addContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_add" ):
                listener.enterExpr_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_add" ):
                listener.exitExpr_add(self)


    class Expr_expContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.PrimaryContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.PrimaryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_exp" ):
                listener.enterExpr_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_exp" ):
                listener.exitExpr_exp(self)


    class Expr_orContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_or" ):
                listener.enterExpr_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_or" ):
                listener.exitExpr_or(self)


    class Expr_primaryContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(ModelicaParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_primary" ):
                listener.enterExpr_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_primary" ):
                listener.exitExpr_primary(self)


    class Expr_andContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_and" ):
                listener.enterExpr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_and" ):
                listener.exitExpr_and(self)


    class Expr_relContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_rel" ):
                listener.enterExpr_rel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_rel" ):
                listener.exitExpr_rel(self)


    class Expr_notContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(ModelicaParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_not" ):
                listener.enterExpr_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_not" ):
                listener.exitExpr_not(self)


    class Expr_mulContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_mul" ):
                listener.enterExpr_mul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_mul" ):
                listener.exitExpr_mul(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ModelicaParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = ModelicaParser.Expr_negContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 844
                localctx.op = self.match(ModelicaParser.T__55)
                self.state = 845
                self.expr(9)
                pass

            elif la_ == 2:
                localctx = ModelicaParser.Expr_expContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 846
                self.primary()
                self.state = 847
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==ModelicaParser.T__56 or _la==ModelicaParser.T__57):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self.primary()
                pass

            elif la_ == 3:
                localctx = ModelicaParser.Expr_notContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 850
                self.match(ModelicaParser.T__70)
                self.state = 851
                self.expr(4)
                pass

            elif la_ == 4:
                localctx = ModelicaParser.Expr_primaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 852
                self.primary()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 870
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = ModelicaParser.Expr_mulContext(self, ModelicaParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 855
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 856
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__28) | (1 << ModelicaParser.T__58) | (1 << ModelicaParser.T__59) | (1 << ModelicaParser.T__60))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 857
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = ModelicaParser.Expr_addContext(self, ModelicaParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 858
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 859
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (ModelicaParser.T__55 - 56)) | (1 << (ModelicaParser.T__61 - 56)) | (1 << (ModelicaParser.T__62 - 56)) | (1 << (ModelicaParser.T__63 - 56)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 860
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = ModelicaParser.Expr_relContext(self, ModelicaParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 861
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 862
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ModelicaParser.T__64 - 65)) | (1 << (ModelicaParser.T__65 - 65)) | (1 << (ModelicaParser.T__66 - 65)) | (1 << (ModelicaParser.T__67 - 65)) | (1 << (ModelicaParser.T__68 - 65)) | (1 << (ModelicaParser.T__69 - 65)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 863
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = ModelicaParser.Expr_andContext(self, ModelicaParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 864
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 865
                        self.match(ModelicaParser.T__71)
                        self.state = 866
                        self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = ModelicaParser.Expr_orContext(self, ModelicaParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 867
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 868
                        self.match(ModelicaParser.T__72)
                        self.state = 869
                        self.expr(3)
                        pass

             
                self.state = 874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Primary_stringContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(ModelicaParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_string" ):
                listener.enterPrimary_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_string" ):
                listener.exitPrimary_string(self)


    class Primary_endContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_end" ):
                listener.enterPrimary_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_end" ):
                listener.exitPrimary_end(self)


    class Primary_output_expression_listContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def output_expression_list(self):
            return self.getTypedRuleContext(ModelicaParser.Output_expression_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_output_expression_list" ):
                listener.enterPrimary_output_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_output_expression_list" ):
                listener.exitPrimary_output_expression_list(self)


    class Primary_unsigned_numberContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNSIGNED_NUMBER(self):
            return self.getToken(ModelicaParser.UNSIGNED_NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_unsigned_number" ):
                listener.enterPrimary_unsigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_unsigned_number" ):
                listener.exitPrimary_unsigned_number(self)


    class Primary_function_argumentsContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_arguments(self):
            return self.getTypedRuleContext(ModelicaParser.Function_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_function_arguments" ):
                listener.enterPrimary_function_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_function_arguments" ):
                listener.exitPrimary_function_arguments(self)


    class Primary_falseContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_false" ):
                listener.enterPrimary_false(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_false" ):
                listener.exitPrimary_false(self)


    class Primary_derivativeContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_derivative" ):
                listener.enterPrimary_derivative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_derivative" ):
                listener.exitPrimary_derivative(self)


    class Primary_component_referenceContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_component_reference" ):
                listener.enterPrimary_component_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_component_reference" ):
                listener.exitPrimary_component_reference(self)


    class Primary_expression_listContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Expression_listContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression_list" ):
                listener.enterPrimary_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression_list" ):
                listener.exitPrimary_expression_list(self)


    class Primary_trueContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_true" ):
                listener.enterPrimary_true(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_true" ):
                listener.exitPrimary_true(self)


    class Primary_functionContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_function" ):
                listener.enterPrimary_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_function" ):
                listener.exitPrimary_function(self)


    class Primary_initialContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call_args(self):
            return self.getTypedRuleContext(ModelicaParser.Function_call_argsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_initial" ):
                listener.enterPrimary_initial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_initial" ):
                listener.exitPrimary_initial(self)



    def primary(self):

        localctx = ModelicaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                localctx = ModelicaParser.Primary_unsigned_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.match(ModelicaParser.UNSIGNED_NUMBER)
                pass

            elif la_ == 2:
                localctx = ModelicaParser.Primary_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(ModelicaParser.STRING)
                pass

            elif la_ == 3:
                localctx = ModelicaParser.Primary_falseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 877
                self.match(ModelicaParser.T__73)
                pass

            elif la_ == 4:
                localctx = ModelicaParser.Primary_trueContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 878
                self.match(ModelicaParser.T__74)
                pass

            elif la_ == 5:
                localctx = ModelicaParser.Primary_functionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.component_reference()
                self.state = 880
                self.function_call_args()
                pass

            elif la_ == 6:
                localctx = ModelicaParser.Primary_derivativeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self.match(ModelicaParser.T__19)
                self.state = 883
                self.function_call_args()
                pass

            elif la_ == 7:
                localctx = ModelicaParser.Primary_initialContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 884
                self.match(ModelicaParser.INITIAL)
                self.state = 885
                self.function_call_args()
                pass

            elif la_ == 8:
                localctx = ModelicaParser.Primary_component_referenceContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 886
                self.component_reference()
                pass

            elif la_ == 9:
                localctx = ModelicaParser.Primary_output_expression_listContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 887
                self.match(ModelicaParser.T__16)
                self.state = 888
                self.output_expression_list()
                self.state = 889
                self.match(ModelicaParser.T__18)
                pass

            elif la_ == 10:
                localctx = ModelicaParser.Primary_expression_listContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 891
                self.match(ModelicaParser.T__75)
                self.state = 892
                self.expression_list()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ModelicaParser.T__0:
                    self.state = 893
                    self.match(ModelicaParser.T__0)
                    self.state = 894
                    self.expression_list()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 900
                self.match(ModelicaParser.T__76)
                pass

            elif la_ == 11:
                localctx = ModelicaParser.Primary_function_argumentsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 902
                self.match(ModelicaParser.T__29)
                self.state = 903
                self.function_arguments()
                self.state = 904
                self.match(ModelicaParser.T__30)
                pass

            elif la_ == 12:
                localctx = ModelicaParser.Primary_endContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 906
                self.match(ModelicaParser.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self, i:int=None):
            if i is None:
                return self.getTokens(ModelicaParser.IDENT)
            else:
                return self.getToken(ModelicaParser.IDENT, i)

        def getRuleIndex(self):
            return ModelicaParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = ModelicaParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__27:
                self.state = 909
                self.match(ModelicaParser.T__27)


            self.state = 912
            self.match(ModelicaParser.IDENT)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__27:
                self.state = 913
                self.match(ModelicaParser.T__27)
                self.state = 914
                self.match(ModelicaParser.IDENT)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Component_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.child = None # Component_referenceContext

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def array_subscripts(self):
            return self.getTypedRuleContext(ModelicaParser.Array_subscriptsContext,0)


        def component_reference(self):
            return self.getTypedRuleContext(ModelicaParser.Component_referenceContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_component_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_reference" ):
                listener.enterComponent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_reference" ):
                listener.exitComponent_reference(self)




    def component_reference(self):

        localctx = ModelicaParser.Component_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_component_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__27:
                self.state = 920
                self.match(ModelicaParser.T__27)


            self.state = 923
            self.match(ModelicaParser.IDENT)
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 924
                self.array_subscripts()


            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 927
                localctx.child = self.component_reference()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_call_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_arguments(self):
            return self.getTypedRuleContext(ModelicaParser.Function_argumentsContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_function_call_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_args" ):
                listener.enterFunction_call_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_args" ):
                listener.exitFunction_call_args(self)




    def function_call_args(self):

        localctx = ModelicaParser.Function_call_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_function_call_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(ModelicaParser.T__16)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__12) | (1 << ModelicaParser.T__13) | (1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__19) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__29) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__55))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ModelicaParser.T__70 - 71)) | (1 << (ModelicaParser.T__73 - 71)) | (1 << (ModelicaParser.T__74 - 71)) | (1 << (ModelicaParser.T__75 - 71)) | (1 << (ModelicaParser.INITIAL - 71)) | (1 << (ModelicaParser.IDENT - 71)) | (1 << (ModelicaParser.STRING - 71)) | (1 << (ModelicaParser.UNSIGNED_NUMBER - 71)))) != 0):
                self.state = 931
                self.function_arguments()


            self.state = 934
            self.match(ModelicaParser.T__18)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Function_argumentContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Function_argumentContext,i)


        def for_indices(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.For_indicesContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.For_indicesContext,i)


        def named_arguments(self):
            return self.getTypedRuleContext(ModelicaParser.Named_argumentsContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_function_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arguments" ):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arguments" ):
                listener.exitFunction_arguments(self)




    def function_arguments(self):

        localctx = ModelicaParser.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_function_arguments)
        self._la = 0 # Token type
        try:
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.function_argument()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ModelicaParser.T__20 or _la==ModelicaParser.T__48:
                    self.state = 941
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ModelicaParser.T__20]:
                        self.state = 937
                        self.match(ModelicaParser.T__20)
                        self.state = 938
                        self.function_argument()
                        pass
                    elif token in [ModelicaParser.T__48]:
                        self.state = 939
                        self.match(ModelicaParser.T__48)
                        self.state = 940
                        self.for_indices()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                self.named_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.Named_argumentContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.Named_argumentContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_named_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_arguments" ):
                listener.enterNamed_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_arguments" ):
                listener.exitNamed_arguments(self)




    def named_arguments(self):

        localctx = ModelicaParser.Named_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_named_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.named_argument()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 950
                self.match(ModelicaParser.T__20)
                self.state = 951
                self.named_argument()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(ModelicaParser.IDENT, 0)

        def function_argument(self):
            return self.getTypedRuleContext(ModelicaParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = ModelicaParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(ModelicaParser.IDENT)
            self.state = 958
            self.match(ModelicaParser.T__14)
            self.state = 959
            self.function_argument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ModelicaParser.RULE_function_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Argument_expressionContext(Function_argumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Function_argumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_expression" ):
                listener.enterArgument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_expression" ):
                listener.exitArgument_expression(self)


    class Argument_functionContext(Function_argumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ModelicaParser.Function_argumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(ModelicaParser.NameContext,0)

        def named_arguments(self):
            return self.getTypedRuleContext(ModelicaParser.Named_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_function" ):
                listener.enterArgument_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_function" ):
                listener.exitArgument_function(self)



    def function_argument(self):

        localctx = ModelicaParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__12]:
                localctx = ModelicaParser.Argument_functionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(ModelicaParser.T__12)
                self.state = 962
                self.name()
                self.state = 963
                self.match(ModelicaParser.T__16)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ModelicaParser.IDENT:
                    self.state = 964
                    self.named_arguments()


                self.state = 967
                self.match(ModelicaParser.T__18)
                pass
            elif token in [ModelicaParser.T__13, ModelicaParser.T__16, ModelicaParser.T__19, ModelicaParser.T__27, ModelicaParser.T__29, ModelicaParser.T__39, ModelicaParser.T__55, ModelicaParser.T__70, ModelicaParser.T__73, ModelicaParser.T__74, ModelicaParser.T__75, ModelicaParser.INITIAL, ModelicaParser.IDENT, ModelicaParser.STRING, ModelicaParser.UNSIGNED_NUMBER]:
                localctx = ModelicaParser.Argument_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_output_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_expression_list" ):
                listener.enterOutput_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_expression_list" ):
                listener.exitOutput_expression_list(self)




    def output_expression_list(self):

        localctx = ModelicaParser.Output_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_output_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ModelicaParser.T__13) | (1 << ModelicaParser.T__16) | (1 << ModelicaParser.T__19) | (1 << ModelicaParser.T__27) | (1 << ModelicaParser.T__29) | (1 << ModelicaParser.T__39) | (1 << ModelicaParser.T__55))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ModelicaParser.T__70 - 71)) | (1 << (ModelicaParser.T__73 - 71)) | (1 << (ModelicaParser.T__74 - 71)) | (1 << (ModelicaParser.T__75 - 71)) | (1 << (ModelicaParser.INITIAL - 71)) | (1 << (ModelicaParser.IDENT - 71)) | (1 << (ModelicaParser.STRING - 71)) | (1 << (ModelicaParser.UNSIGNED_NUMBER - 71)))) != 0):
                self.state = 972
                self.expression()


            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 975
                self.match(ModelicaParser.T__20)
                self.state = 976
                self.expression()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = ModelicaParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.expression()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 983
                self.match(ModelicaParser.T__20)
                self.state = 984
                self.expression()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_subscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ModelicaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(ModelicaParser.SubscriptContext,i)


        def getRuleIndex(self):
            return ModelicaParser.RULE_array_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_subscripts" ):
                listener.enterArray_subscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_subscripts" ):
                listener.exitArray_subscripts(self)




    def array_subscripts(self):

        localctx = ModelicaParser.Array_subscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_array_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(ModelicaParser.T__75)
            self.state = 991
            self.subscript()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ModelicaParser.T__20:
                self.state = 992
                self.match(ModelicaParser.T__20)
                self.state = 993
                self.subscript()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 999
            self.match(ModelicaParser.T__76)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ModelicaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = ModelicaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_subscript)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ModelicaParser.T__17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(ModelicaParser.T__17)
                pass
            elif token in [ModelicaParser.T__13, ModelicaParser.T__16, ModelicaParser.T__19, ModelicaParser.T__27, ModelicaParser.T__29, ModelicaParser.T__39, ModelicaParser.T__55, ModelicaParser.T__70, ModelicaParser.T__73, ModelicaParser.T__74, ModelicaParser.T__75, ModelicaParser.INITIAL, ModelicaParser.IDENT, ModelicaParser.STRING, ModelicaParser.UNSIGNED_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_comment(self):
            return self.getTypedRuleContext(ModelicaParser.String_commentContext,0)


        def annotation(self):
            return self.getTypedRuleContext(ModelicaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = ModelicaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.string_comment()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.T__77:
                self.state = 1006
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_commentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ModelicaParser.STRING)
            else:
                return self.getToken(ModelicaParser.STRING, i)

        def getRuleIndex(self):
            return ModelicaParser.RULE_string_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_comment" ):
                listener.enterString_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_comment" ):
                listener.exitString_comment(self)




    def string_comment(self):

        localctx = ModelicaParser.String_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_string_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ModelicaParser.STRING:
                self.state = 1009
                self.match(ModelicaParser.STRING)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ModelicaParser.T__61:
                    self.state = 1010
                    self.match(ModelicaParser.T__61)
                    self.state = 1011
                    self.match(ModelicaParser.STRING)
                    self.state = 1016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modification(self):
            return self.getTypedRuleContext(ModelicaParser.Class_modificationContext,0)


        def getRuleIndex(self):
            return ModelicaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = ModelicaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(ModelicaParser.T__77)
            self.state = 1020
            self.class_modification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[56] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




