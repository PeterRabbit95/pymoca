{# This is a jinja template file #}
"""
Automatically generated by pymola
"""

# imports
from __future__ import print_function
import sympy
import sympy.physics.mechanics as mech
sympy.init_printing()
mech.init_vprinting()
import scipy.integrate
import argparse
import pylab as pl
import sys

{%- set class_spec = ctx.class_definition()[0].class_specifier() %}
{%- set class_name = class_spec.IDENT()[0].getText() %}
{%- set element_list = class_spec.composition().element_list()[0].element() %}
{%- set equation_sections = class_spec.composition().equation_section() %}
class Model(object):

    def __init__(self):

        # parameters
        self.p = {
{%- for elem in element_list -%}
    {%- set clause = elem.component_clause() %}
    {%- if clause.type_prefix().getText() == 'parameter' %}
        {%- for comp in clause.component_list().component_declaration() %}
            {%- set decl = comp.declaration() %}
            {%- set mod = comp.declaration().modification() %}
            '{{decl.IDENT().getText()}}' : {{mod.expression().getText()}},
        {%- endfor %}
    {%- endif %}
{%- endfor %}
        }

        # states
        self.x0 = {
{%- for elem in element_list -%}
    {%- set clause = elem.component_clause() %}
    {%- if clause.type_prefix().getText() == '' %}
        {%- for comp in clause.component_list().component_declaration() %}
            {%- set decl = comp.declaration() %}
            {%- set mod = comp.declaration().modification() %}
            {%- set arg = mod.class_modification().argument_list().argument()[0] %}
            {%- set elem_mod = arg.element_modification_or_replaceable().element_modification() %}
            {%- if elem_mod.name().getText() == 'start' %}
            '{{decl.IDENT().getText()}}' : {{elem_mod.modification().expression().getText()}},
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endfor %}
        }

		# equations
		self.eqs = [
{%- for eqn_sect in equation_sections -%}
    {%- for eqn in eqn_sect.equation() -%}
			{{eqn.getText()}}
    {%- endfor %}
{%- endfor %}
		]

    def simulate(self, do_plot):
        "Simulate model."

        t = sympy.symbols('t')

        x = sympy.Matrix(x)
        x_dot = x.diff(t)

        sol = sympy.solve(self.eqs, x_dot)

        f = sympy.Matrix([sol[xi] for xi in x_dot])

        p_vect = [locals()[key] for key in p]

        f_lam = sympy.lambdify((t, x, p_vect), f)

        t0 = 0
        x0 = [0, 0]
        p0 = [1, 1]

        sim = scipy.integrate.ode(f_lam)
        sim.set_initial_value(t0, x0)
        sim.set_f_params(p0)
        tf = 10
        dt = 0.1

        data = {
            'x': [],
            't': [],
        }

        while  sim.t < tf:
            sim.integrate(sim.t + dt)
            data['x'] += [sim.y]
            data['t'] += [sim.t]

        if do_plot:
            pl.plot(data['t'], data['x'])

def main(argv):
    "main function"
    parser = argparse.ArgumentParser()
    parser.add_argument('--plot', '-p', action='store_true')
    args = parser.parse_args(argv)
    parser.set_defaults(plot=False)
    model = Model()
    model.simulate(do_plot=args.plot)

if __name__ == "__main__":
    main(sys.argv[1:])

{# vim: set et fenc=utf-8 ft=jinja ff=unix sts=4 sw=4 ts=8 #}
