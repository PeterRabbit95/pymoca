from __future__ import print_function, absolute_import, division, print_function, unicode_literals

import jinja2
import os
import sys

FILE_DIR = os.path.dirname(os.path.realpath(__file__))

from . import tree


class SympyGenerator(tree.TreeListener):
    indent='    '

    def __init__(self):
        self.src = {}

    def exitFile(self, tree):
        d = {'classes': []}
        for key in sorted(tree.classes.keys()):
            d['classes'] += [self.src[tree.classes[key]]]

        template = jinja2.Template('''
# do not edit, generated by pymola

from __future__ import print_function, division
import sympy
import sympy.physics.mechanics as mech

{%- for class_key, class in tree.classes.items() %}
{{ render.src[class] }}
{%- endfor %}
''')
        self.src[tree] = template.render({
            'tree': tree,
            'render': self,
        })

    def exitClass(self, tree):
        template = jinja2.Template('''
class {{tree.name}}:

    def __init__(self):

        self.t = sympy.Symbol('t')

        # states
        {%- for state in tree.states %}
        {{ state.name }} = mech.dynamicsymbols('{{ state.name }}')
        {%- endfor %}
        self.x = sympy.Matrix([
            {%- for state in tree.states -%}
            {{ state.name }},
            {%- endfor -%}
        ])

        # inputs
        {%- for input in tree.inputs %}
        {{ input.name }} = sympy.Symbol('{{ input.name }}')
        {%- endfor %}
        self.u = sympy.Matrix([
            {%- for input in tree.inputs -%}
            {{ input.name }},
            {%- endfor -%}
        ])

        # outputs
        {%- for output in tree.outputs %}
        {{ output.name }} = sympy.Symbol('{{ output.name }}')
        {%- endfor %}
        self.y = sympy.Matrix([
            {%- for output in tree.outputs -%}
            {{ output.name }},
            {%- endfor -%}
        ])

        # constants
        {%- for constant in tree.constants %}
        {{ constant.name }} = sympy.Symbol('{{ constant.name }}')
        {%- endfor %}

        # parameters
        {%- for param in tree.parameters %}
        {{ param.name }} = sympy.Symbol('{{ param.name }}')
        {%- endfor %}
        self.p = sympy.Matrix([
            {%- for param in tree.parameters -%}
            {{ param.name }},
            {%- endfor -%}
        ])

        # variables
        {%- for var in tree.variables %}
        {{ var.name }} = sympy.Symbol('{{ var.name }}')
        {%- endfor %}

        # equations
        self.eqs = [
        {%- for eq in tree.equations %}
            {{ render.src[eq] }},
        {% endfor -%}
            ]

    def get_fg(self):
        fg_sol = sympy.solve(self.eqs, self.x.diff(self.t))
        f = self.x.diff(self.t).subs(fg_sol)
        g = self.y.subs(fg_sol)
        return f, g
    ''')
        self.src[tree] = template.render({
            'tree': tree,
            'render': self,
        })

    def exitExpression(self, tree):
        op = str(tree.operator)
        if op == 'der':
            src = '({tree.operands[0].name:s}).diff(self.t)'.format(**locals())
        else:
            src = "({operator:s} ".format(**tree.__dict__)
            for operand in tree.operands:
                src +=  self.src[operand]
            src += ")"
        self.src[tree] = src

    def exitPrimary(self, tree):
        self.src[tree] = "{value:s".format(**tree.__dict__)

    def exitComponentRef(self, tree):
        self.src[tree] = "{name:s}".format(**tree.__dict__)

    def exitSymbol(self, tree):
        self.src[tree] = "{name:s} = sympy.symbols('{name:s}')".format(**tree.__dict__)

    def exitEquation(self, tree):
        self.src[tree] = "{left:s} - ({right:s})".format(
            left=self.src[tree.left],
            right=self.src[tree.right])
