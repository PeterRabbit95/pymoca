
# do not edit, generated by pymola

from __future__ import print_function, division
import sympy
import sympy.physics.mechanics as mech
from pymola.sympy_runtime import OdeModel

class Quad(OdeModel):

    def __init__(self):

        super(Quad, self).__init__()

        # states
        x, y, z, v_x, v_y, v_z = mech.dynamicsymbols('x, y, z, v_x, v_y, v_z')
        self.x = sympy.Matrix([x, y, z, v_x, v_y, v_z])

        # inputs
        self.u = sympy.Matrix([])

        # outputs
        self.y = sympy.Matrix([])

        # constants
        self.c = sympy.Matrix([])
        self.c0 = {
            }

        # parameters
        J_x, J_y, J_z, m = sympy.symbols('J_x, J_y, J_z, m')
        self.p = sympy.Matrix([J_x, J_y, J_z, m])
        self.p0 = {
            'J_x' : 1,
            'J_y' : 1,
            'J_z' : 1,
            'm' : 1,
            }

        # variables
        F_x, F_y, F_z = sympy.symbols('F_x, F_y, F_z')
        self.v = sympy.Matrix([F_x, F_y, F_z])
      
        # equations
        self.eqs = [
            F_x - (- x),
            F_y - (- y),
            F_z - (- z),
            (x).diff(self.t) - (v_x),
            (y).diff(self.t) - (v_y),
            (z).diff(self.t) - (v_z),
            m * (v_x).diff(self.t) - (F_x),
            m * (v_y).diff(self.t) - (F_y),
            m * (v_z).diff(self.t) - (F_z),
            ]

        self.compute_fg()
    